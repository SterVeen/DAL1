
_________________________________________________________________________________
>>> Getting the source code

The offical address to obtain a working copy of the DAL as part of the LOFAR 
User Software (LUS) is from the SVN repository

  svn co http://usg.lofar.org/svn/code/trunk lofarsoft

However as of begin 2011 we are preparing to make the DAL a stand-alone software
package, which no longer is tied to the LUS. More information can be found on
the following web-sites and -pages:

* https://github.com/lbaehren/DAL (Git code repository)

* http://usg.lofar.org/doxygen/group___d_a_l.html (Doxygen source documentation)

* http://svn.astron.nl/CDash/index.php?project=DAL (Testing dashobard)

_________________________________________________________________________________
>>> Organization of the source code

The components of the DAL is organized into the following directory structure:

 DAL
 |-- implement           ..   Library source code for libdal and pydal.
 |-- test                ..   Test programs for library C++ classes.
 |-- apps                ..   Application programs build on top of the library.
 |-- doc                 ..   Documentation to be processed by Doxygen.
 `-- data                ..   Reference data sets used for rest programs.

_________________________________________________________________________________
>>> External dependencies

* HDF5 library (http://www.hdfgroup.org/HDF5)

* WCSLIB (http://www.atnf.csiro.au/people/mcalabre/WCS)

* CFITSIO (http://heasarc.gsfc.nasa.gov/fitsio)

* CASACORE (http://code.google.com/p/casacore)

* Boost C++ Libraries (http://www.boost.org)

* Python (http://www.python.org)


_________________________________________________________________________________
>>> DAL components

* C++ library (libdal)

  The main component of the DAL is a C++ library, which can be used by an
  application programmer to gain access to a number of LOFAR standard data
  products.

* Python module (pydal)

  The functionality of the C++ library is exposed to the Python environment
  a thin layer of bindings, using Boost.Python.

_________________________________________________________________________________
>>> Coding conventions

* All classes are within the namespace "DAL".

* All source files contain a Doxygen-based documentation of their methods.
  All classes/files are contained within the group "DAL".

* Private variables end with "_p" to distinguish them from local variables, e.g.
  "length_p".

* Pointers should be marked by a leading "p"; e.g. "pShape" or -- in the case
  of a private variable "pShape_p".
