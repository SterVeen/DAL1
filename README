
Contents:

  - Getting the source code
  - Organization of the source code
  - External dependencies
  - Configuration and build
  - Coding conventions

_________________________________________________________________________________
>>> Getting the source code

As of Feb 15, 2001 there are two ways in which to retrieve, build and install the
DAL:

  1. From the original source repository on Github.

     In order to build the DAL as a stand-alone library, clone directly from the
     repository on Github:
     
     git clone https://github.com/lbaehren/DAL.git DAL

  2. As part of the LOFAR User Software (LUS).

     If you want (or need) to use the DAL as part of the LUS software collection,
     check out a working copy of the code base from the LUS Subversion repository

     svn co http://usg.lofar.org/svn/code/trunk lofarsoft

     Once the checkout is complete (assuming bash as shell):

     cd lofarsoft
     export LOFARSOFT=`pwd`
     . ./devel_common/scripts/init.sh
     cd build
     ./bootstrap
     make dal


_________________________________________________________________________________
>>> Organization of the source code

The components of the DAL is organized into the following directory structure:

 DAL
 |-- implement           ..   Library source code for libdal and pydal.
 |   |-- core            ..   Core library classes
 |   |-- coordinates     ..   Representation of world coordinates
 |   |-- data_common     ..   Common functionality for datasets
 |   |-- data_hl         ..   High-level interfaces to datasets
 |   `-- bindings        ..   Bindings to scripting languages
 |-- test                ..   Test programs for library C++ classes.
 |-- apps                ..   Application programs build on top of the library.
 |-- doc                 ..   Documentation to be processed by Doxygen.
 `-- data                ..   Reference data sets used for rest programs.

_________________________________________________________________________________
>>> External dependencies

* HDF5 library (http://www.hdfgroup.org/HDF5)

* WCSLIB (http://www.atnf.csiro.au/people/mcalabre/WCS)

* CFITSIO (http://heasarc.gsfc.nasa.gov/fitsio)

* CASACORE (http://code.google.com/p/casacore)

* Boost C++ Libraries (http://www.boost.org)

* Python (http://www.python.org)

_________________________________________________________________________________
>>> Configuration and build

The DAL uses the CMake (www.cmake.org) Cross-Platform Makefile Generator for 
configuration and control of the build.

Once your checkout from the Git repository is complete you will have a directory
structure on disk as described in section "Organization of the source code"
above.

  cd DAL
  mkdir build
  cd build
  cmake ..
  make

The default installation location is "/usr/local"; if you want to change this,
you can tell CMake so by using

  cmake -DCMAKE_INSTALL_PREFIX=<installation prefix> ..

If you want to submit test test results - from configuration, build and running
the test programs - you can do so by executing

  make Experimental

from within the build directory. The collected results will be published at 

  http://svn.astron.nl/CDash/index.php?project=DAL

_________________________________________________________________________________
>>> Coding conventions

* All classes reside within the namespace "DAL".

* All source files contain a Doxygen-based documentation of their methods.
  All classes/files are contained within the group "DAL".

* Private variables are indicated by the prefix "its", in order to distringuish
  them from temporary/local variables, e.g.

  itsLength - private data member
  length    - local variable or function parameter

* Pointers should be marked by a leading "p"; e.g. "pShape" or -- in the case
  of a private variable "pShape_p".
