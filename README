
_________________________________________________________________________________
>>> Getting the source code

The offical address to obtain a working copy of the DAL as part of the LOFAR 
User Software is from the SVN repository

  svn co http://usg.lofar.org/svn/code/trunk lofarsoft

As an alternative you also can clone from the respository on Github

  git://github.com/lbaehren/DAL.git DAL

Once checkout from the repository is complete, you can change into the "build"
directory to run the bootstrap script.

  cd build
  ./bootstrap

The the main job of the bootstrap script is to check whether or not a recent
enough version of CMake (www.cmake.org) is installed on your system; if the found
installation is too old or not available at all, a build from the provided
sources is triggered and the resulting executables will be installed into
"release/bin" (which of course then should be in your PATH).

Once the bootstrap script has finished run

  make dal


_________________________________________________________________________________
>>> External dependencies

* HDF5 library (http://www.hdfgroup.org/HDF5)

* WCSLIB (http://www.atnf.csiro.au/people/mcalabre/WCS)

* CFITSIO (http://heasarc.gsfc.nasa.gov/fitsio)

* CASACORE (http://code.google.com/p/casacore)

* Boost C++ Libraries (http://www.boost.org)


_________________________________________________________________________________
>>> DAL components

* C++ library (libdal)

  The main component of the DAL is a C++ library, which can be used by an
  application programmer to gain access to a number of LOFAR standard data
  products.

* Python module (pydal)

  The functionality of the C++ library is exposed to the Python environment
  a thin layer of bindings, using Boost.Python.

_________________________________________________________________________________
>>> Coding conventions

* All classes are within the namespace "DAL".

* All source files contain a Doxygen-based documentation of their methods.
  All classes/files are contained within the group "DAL".

* Private variables end with "_p" to distinguish them from local variables, e.g.
  "length_p".

* Pointers should be marked by a leading "p"; e.g. "pShape" or -- in the case
  of a private variable "pShape_p".
