
CONTENTS:

  - Introduction
  - Getting the source code
  - Organization of the source code
  - External dependencies
  - Configuration and build
  - Coding conventions

_________________________________________________________________________________
>>> Introduction

a) DAL overview

The Data Access Library (DAL) is a library that abstracts the underlying file
format from the user when working with radio astronomy data. Underlying formats
may include HDF5, AIPS++/CASA tables, FITS or specific raw formats. This library
is available to both the C/C++ developer and the Python user via the "pydal"
module.

Officially, the DAL supports three file types:
  
1. HDF5
   Hierarchical Data Format Version 5 (HDF5), is a relatively recent format
   designed with particular attention to efficient operation on extremely large
   data sets.  HDF5 is the intended format for LOFAR data products.
   HDF5 is organized much like a unix file system.  The internal structure consists
   of a root group, '/', which may recursively contain subgroups.  Each of these
   groups may, in turn, contain other groups or n-dimensional arrays of simple or
   complex datatypes.  HDF5 tables are particular case of a HDF5 array and thus are
   treated in a similar manner.  Almost all objects in a HDF5 file can hold
   associated metadata in the form of an attribute.
   HDF5 files can be both read and written by the DAL.

2. CASA Tables
   CASA Tables in general, and Measurement Sets in particular, are the primary data
   product of the Westerbork Synthesis Radio Telescope (WSRT).  As WSRT is also
   based at ASTRON (where there is a large community of experienced CASA users),
   there is naturally a strong interest and advantage in building upon this
   expertise for LOFAR.
   CASA tables can currently be read, but not written, by the DAL.

3. FITS
   FITS is the standard astronomical image format.  Among its advantages for
   inclusion in the DAL is its widespread use and extensive toolset.  Among its
   limitations is the fact that it was not designed for large and complex
   datasets.
   FITS is the lowest of priority of the three supported formats and currently
   has almost no actual support in the DAL.

At present, each of these file types have varying levels of support.

b) Next-generation astronomical data

The LOFAR (www.lofar.org) project has set up a moderated majordomo email list,
called "nextgen-astrodata@astron.nl". Interested parties are encouraged to sign
up via majordomo@anstron.nl with “subscribe nextgen-astrodata” as the only text
in the body of the message.

We would like to bring together scientists and developers struggling with large
and complex datasets as well as those groups currently exploring HDF5 (www.hdfgroup.org)
implementations. Ultimately we would like to see these formats grow into a true
set of standards for radio data that can meet the demands of the next generation
of radio observatories as well as the non-radio community such as LSST and other
future missions. We feel that the time is ripe to solve this issue across
wavelengths and projects.  HDF5 is mature and is being used extensively in
science, and now as the format for the LOFAR data products.


_________________________________________________________________________________
>>> Getting the source code

As of Feb 15, 2001 there are two ways in which to retrieve, build and install the
DAL:

  1. From the original source repository on Github.

     In order to build the DAL as a stand-alone library, clone directly from the
     repository on Github:
     
       git clone https://github.com/lbaehren/DAL.git DAL

     Once your checkout from the Git repository is complete, follow the
     instructions as described in the section "Configuration and build" below.

  2. As part of the LOFAR User Software (LUS).

     If you want (or need) to use the DAL as part of the LUS software collection,
     check out a working copy of the code base from the LUS Subversion repository

       svn co http://usg.lofar.org/svn/code/trunk lofarsoft

     Once the checkout is complete (assuming bash as shell):

       cd lofarsoft
       export LOFARSOFT=`pwd`
       . ./devel_common/scripts/init.sh
       cd build
       ./bootstrap
       make dal

     By default build of the DAL will be carried out from a source tar-archive
     which comes as part of the software collection.


_________________________________________________________________________________
>>> Organization of the source code

The components of the DAL is organized into the following directory structure:

 DAL
 |-- implement           ..   Library source code for libdal and pydal.
 |   |-- core            ..   Core library classes
 |   |-- coordinates     ..   Representation of world coordinates
 |   |-- data_common     ..   Common functionality for datasets
 |   |-- data_hl         ..   High-level interfaces to datasets
 |   `-- bindings        ..   Bindings to scripting languages
 |-- test                ..   Test programs for library C++ classes.
 |-- apps                ..   Application programs build on top of the library.
 |-- doc                 ..   Documentation to be processed by Doxygen.
 `-- data                ..   Reference data sets used for rest programs.


_________________________________________________________________________________
>>> External dependencies

* HDF5 library, >=1.8.3 (http://www.hdfgroup.org/HDF5)

* WCSLIB, >=4.2 (http://www.atnf.csiro.au/people/mcalabre/WCS)

* CFITSIO, >=3.0 (http://heasarc.gsfc.nasa.gov/fitsio)

* CASACORE (http://code.google.com/p/casacore)

* Boost C++ Libraries, >=1.40.0 (http://www.boost.org)

* Python (http://www.python.org)

_________________________________________________________________________________
>>> Configuration and build

The DAL uses the CMake (www.cmake.org) Cross-Platform Makefile Generator for 
configuration and control of the build.

Once your checkout from the Git repository is complete you will have a directory
structure on disk as described in section "Organization of the source code"
above.

  cd DAL
  mkdir build
  cd build
  cmake ..
  make

The default installation location is "/usr/local"; if you want to change this,
you can tell CMake so by using

  cmake -DCMAKE_INSTALL_PREFIX=<installation prefix> ..

While the CMake scripts will check a number of standard locations for the 
required 3-party packages (such as Boost, HDF5, etc.), but if you are using 
a custom version installed at a non-standard location, you might need to aid
CMake in finding all required components:

  cmake -DHDF5_ROOT_DIR=<basedir of HDF5 install> -DCASACORE_ROOT_DIR=<basedir of casacore install> ..

If you want to submit test test results - from configuration, build and running
the test programs - you can do so by executing

  make Experimental

from within the build directory. The collected results will be published at 

  http://svn.astron.nl/CDash/index.php?project=DAL

_________________________________________________________________________________
>>> Coding conventions

* All classes reside within the namespace "DAL".

* All source files contain a Doxygen-based documentation of their methods.
  All classes/files are contained within the group "DAL".

* Private variables are indicated by the prefix "its", in order to distringuish
  them from temporary/local variables, e.g.

  itsLength - private data member
  length    - local variable or function parameter

* Pointers should be marked by a leading "p"; e.g. "pShape" or -- in the case
  of a private variable "pShape_p".
