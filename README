
CONTENTS:

  - Introduction
  - Getting the source code
  - Organization of the source code
  - External dependencies
  - Configuration and build

_________________________________________________________________________________
>>> Introduction

The size and complexity of astronomical data are growing at relentless rates.
This increase is especially apparent in the radio community as evidenced by the 
data challenges faced by many of the SKA pathfinders and other major radio
telescopes such as LOFAR, EVLA, ALMA, ASKAP, MeerKAT, MWA, LWA and eMERLIN.
Enormous data rates are also becoming a challenge for large optical projects
that are currently ramping up including Pan-Starrs and LSST. As progress towards
meeting these challenges, ASTRON and the LOFAR project are currently exploring
the use of the Hierarchical Data Format, version 5 (HDF5) for LOFAR radio data
encapsulation.

The Data Access Library (DAL) is a library that abstracts the underlying file
format from the user when working with radio astronomy data. Underlying formats
may include HDF5, AIPS++/CASA tables, FITS or specific raw formats. This library
is available to both the C/C++ developer and the Python user via the "pydal"
module.


_________________________________________________________________________________
>>> Getting the source code

As of Feb 15, 2001 there are two ways in which to retrieve, build and install the
DAL:

  1. From the original source repository on Github.

     In order to build the DAL as a stand-alone library, clone directly from the
     repository on Github:
     
       git clone https://github.com/nextgen-astrodata/DAL.git DAL

     Once your checkout from the Git repository is complete, follow the
     instructions as described in the section "Configuration and build" below.

  2. As part of the LOFAR User Software (LUS).

     If you want (or need) to use the DAL as part of the LUS software collection,
     check out a working copy of the code base from the LUS Subversion repository

       svn co http://usg.lofar.org/svn/code/trunk lofarsoft

     Once the checkout is complete (assuming bash as shell):

       cd lofarsoft
       export LOFARSOFT=`pwd`
       . ./devel_common/scripts/init.sh
       cd build
       ./bootstrap
       make dal

     By default build of the DAL will be carried out from a source tar-archive
     which comes as part of the software collection.


_________________________________________________________________________________
>>> Organization of the source code

The components of the DAL is organized into the following directory structure:

 DAL
 |-- implement           ..   Library source code for libdal and pydal.
 |   |-- core            ..   Core library classes
 |   |-- coordinates     ..   Representation of world coordinates
 |   |-- data_common     ..   Common functionality for datasets
 |   |-- data_hl         ..   High-level interfaces to datasets
 |   `-- bindings        ..   Bindings to scripting languages
 |-- test                ..   Test programs for library C++ classes.
 |-- apps                ..   Application programs build on top of the library.
 |-- doc                 ..   Documentation.
 `-- data                ..   Reference data sets used for rest programs.


_________________________________________________________________________________
>>> External dependencies

* CMake, >=2.6 (www.cmake.org)

* HDF5 library, >=1.8.3 (www.hdfgroup.org/HDF5)

* WCSLIB, >=4.2 (www.atnf.csiro.au/people/mcalabre/WCS)

* CFITSIO, >=3.0 (heasarc.gsfc.nasa.gov/fitsio)

* CASACORE (code.google.com/p/casacore)

* Boost C++ Libraries, >=1.40.0 (www.boost.org)

* Python (www.python.org)

_________________________________________________________________________________
>>> Configuration and build

The DAL uses the CMake (www.cmake.org) Cross-Platform Makefile Generator for 
configuration and control of the build.

Once your checkout from the Git repository is complete you will have a directory
structure on disk as described in section "Organization of the source code"
above.

  cd DAL
  mkdir build
  cd build
  cmake ..
  make

The default installation location is "/usr/local"; if you want to change this,
you can tell CMake so by using

  cmake -DCMAKE_INSTALL_PREFIX=<installation prefix> ..

The CMake scripts will check a number of standard locations for the required
3-party packages (such as Boost, HDF5, etc.), but if you are using a custom
version installed at a non-standard location, you might need to aid CMake in
finding all required components:

  cmake -DHDF5_ROOT_DIR=<basedir of HDF5 install> ..

In general CMake cache entries are passed through the 

  -D <var>:<type>=<value>     or      -D <var>=<value>

command line syntax. The following options/cache variables can be used to 
configure the DAL build:

  Installation prefix:

    -D CMAKE_INSTALL_PREFIX=<path>

  Enable/disable code debugging messages:

    -D DAL_DEBUGGING_MESSAGES={YES|NO}

  Build with support for MySQL database:

    -D DAL_WITH_MYSQL={YES|NO}

  Root directory of the Boost++ library installation:

    -D BOOST_ROOT_DIR=<path>

  Root directory of the casacore library installation:

    -D CASACORE_ROOT_DIR=<path>

  Root directory of the HDF5 library installation:

    -D HDF5_ROOT_DIR=<path>

