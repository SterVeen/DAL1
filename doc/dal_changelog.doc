/* $Id$ */

/**

\page dal_changelog DAL :: Changelog

<hr>

<pre>
From: Lars B"ahren
Date: November 12, 2008 1:04:01 PM GMT+01:00
</pre>

Hi everybody,

as some of you might know I have been spending the better part of the last two weeks digging through the DAL in other to find and eliminate bugs which would a) affect the general functionality of the library and b) cause the interface to the TBB times-series data to fail on a number of occasions. Since a number of larger commits have been done recently I thought I once again fill you in on the main issues:

1) I think I am now done merging the previously existing collection of common routines for access to HDF5 files; there were function collections started by Joe and me, both having considerable overlap, so come cleaning up was in order. As a part of this effort I went through all implemented methods to check whether or not they were performing as expected; this resulted in the elimination of quite a number of bugs in the handling of metadata/attributes, especially concerning string-valued entries and vector-type attributes (as e.g. used to store antenna position values and antenna position units). The revised and tested set of functions now is contained within dalCommon.h and used by all classes implementing objects supported by the DAL.

2) I have created a revised list of test data-sets which is used to test the functionality of the routines (both low-level and high-level). A compressed tar archive can be obtained through the USG server, providing examples of raw and HDF5-versions for beam-formed data, TBB time-series data, MeasurementSets and FITS. Aside from the already existing unit testing a number of functional tests have been added to the CMake scripts.

3) All types of attributes storing metadata associated with the TBB time-series data now are supported: this now also includes vector-valued attributes (see comment above) as well as derived objects (such as casacore Measures used for handling positions and directions).

4) The high-level interfaces to the TBB time-series data (DAL::TBB_Timeseries, DAL::TBB_StationGroup and DAL::TBB_DipoleDataset) have undergone extensive testing and debugging; as a result of this also the pending issue of segmentation faults when using the top-level  object seem to have been resolved. A few final tests need to be run on the Linux platforms to be supported, since past experience has shown that problems will surface differently on Mac OS X and Linux.

Next in line:

1) Add method(s) to fill in the missing station and antenna position information using tables created for station CalServer; as long as tbb2h5 is not able to talk to the central parameter database, these metadata cannot be filled in at file creation time.

<hr>

<pre>
From: Lars B"ahren
Date: October 15, 2008 4:30:58 PM GMT+02:00
</pre>

Hey everybody,

another bigger set of updates has just gone online:

1) After some major debugging session I have been able to track down the error resulting in the return of corrupted string attribute values. One of the last changes Joe had been adding before signing off from major work on the DAL, was the transition from fixed length to variable length string attributes. While this allows a greater flexibility in storing metadata, this broke the routines which then in turn would read the attributes back in. This has been fixed now, such that especially the access to the attributes attached to the TBB time-series data and the beam-formed data is functional again.

2) All pre-compiler flags indicating the presence of an external component (e.g. CFITSIO, HDF5) now have been switched to HAVE_<name>, thereby reaching unification of the flags across the software packages. The previous mix of statements required the use of multiple flags to activate/deactivate code segments across packages, which e.g. became relevant when coding the CR-Tools against the DAL.

3) Continued merging the contents of Common.cpp and HDF5Common.cpp into a single set of commonly used routines now to be found in dalCommon.cpp

4) The run-time error detected by John has been resolved; the problem was the missing installation of and linking against one of the Boost libraries. Depending on the platform either a mix of system-wide libraries and local versions would be used, or the required symbols would not be located at all.

Next in line:

1) Implement recursive collection of metadata shipped with the TBB time-series data in DAL::TBB_Timeseries.

2) Joe looking into the Python-related issues John ran into while testing in Groningen...?

<hr>

<pre>
From: Lars B"ahren
Date: October 10, 2008 10:49:33 PM GMT+02:00
</pre>

Hey everybody,

after a some extensive debugging session during the 24 hours here is another set up updates/upgrades to the DAL:

1) The segmentation faults we have been getting yesterday afternoon when trying to extract the data columns from the beam-formed data have been resolved (at least I am pretty sure about this). In order to avoid the related issues I have been cleaning up the interface of the DAL::BeamGroup class quite a bit, similar adjustments have been performed on DAL::BeamFormed. The test programs to the classes should be used as reference when coding against the library - some additional examples have been written up in the Doxygen documentation. The requested methods to support the casacore Vector class will be added next, such that shuffling around of the data outside the DAL should be kept to a minimum.

2) I started merging HDF5Common and Common into a what now is called dalCommon. As discussed with Joe this was a logical step, since it makes no sense to keep these routines stored in different places. As a consequence I already cleaned up the set of routines, as a number of them were present double. One of the hopefully popular features is the overloading of the output operator for std::vector<T>, such that these now can be printed just like casa::Vector<T>.

3) Unified the <tt>-D</tt> pre-compiler flags used for indicating the presence of external components; all appearances of WITH_CASA therefore have been replaced by HAVE_CASA.

Next in line:

1) Track the error in writing string-valued attributes, which results in corrupted metadata to both beam-formed data and TBB times-series. Joe already pointed me to the area where the problem should be located, but another extensive bug-tracking session will be required to resolve this.

2) Implement recursive collection of metadata for TBB time-series data (DAL::TBB_Timeseries, DAL::TBB_StationGroup and DAL::TBB_DipoleDataset), such that those can be exported as a record to be fed to the CR::DataReader header record.

3) Have a look at the report sent in by John; I'd say however that the changes to the Python bindings is something which better should be taken care of by Joe.

<hr>

<pre>
From: Lars B"ahren
Date: October 1, 2008 10:21:07 AM GMT+02:00
</pre>

Hey all,

here is another updates on the recent changes:

1) There has been the long-standing issue of making the high-level methods for the access of TBB time-series dat in HDF5 format part of the DAL; originally - when I started with them - they were part of the CR-Tools. However with the ongoing upgrades to the classes this has been the perfect opportunity to finally collect all the functionality within the DAL: the classes LOFAR_DipoleDataset, LOFAR_StationGroup and LOFAR_Timeseries now have been moved to DAL::TBB_DipoleDataset, DAL::TBB_StationGroup and DAL::TBB_Timeseries - a number of functional upgrades have been done already do allow recursive access to the attributes. Resulting adjustments in the CR-Tools source code have been made already.

2) Inspecting the build logs John sent in, I think I have been able to resolve the problem of num_util not building due to missing the NumPy header files - this is an issue which potentially should show up across all systems unless there is a system-wide NumPy installation in a place where the configuration scripts can pick it up. Since include paths are set during configuration time, the header files must be search for also within the source code tree, because they will be showing up in the installation location only afterwards (essentially it is that one cannot prove for something which has not been created yet).

Next in line:

1) Resolve problem of missing Boost library functionality on a number of machines (including the one in Groningen and in Nijmegen). Since making use of the program_options library to handle command line parameters, we can no longer rely on a system-wide installation, as it typically is older and does not contain the required modules yet.

2) For the TBB time-series data collect start-times of the dumps from the individual dipoles and thereof compute a relative shift between the data channels. Also clean up some of the functions which do recursive collection of attributes to properly support casacore types. In order to better connect to the DataReader framework of the CR-Tools, default constructor and file attachment need to be added.

<hr>

<pre>
From: Lars B"ahren
Date: September 29, 2008 3:19:07 PM GMT+02:00
</pre>

Hey everybody,

time for another DAL updates/changes summary:

1) I now completed the mapping of the HDF5 file structure for beam-formed data onto the set of classes Joe started writing; most important of all now also the missing DAL::BeamSubband objects are created, there allowing access to the (meta-) data of the various sub-bands. A number of additional wrapper functions have been written, which enable to retrieve all values of a certain type (e.g. the center frequency) from the sub-bands within a beam.  Minor adjustments have been made to the constructors, adding a bit more flexibility in how to create a new object.

2) Basic testing of all the high-level interfaces to the beam-formed data is now available; besides serving as test the small programs should also serve a place to look for examples how to code against the C++ interface of the DAL.

3) Methods to provide a basic summary of an object's properties have been added to some more of the DAL core classes, thereby enabling the means for simple diagnostics.

Next in line:

1) Next iteration on the installation problems reported by John.

2) Added extraction of time-shifts between TBB dumbs from individual dipoles to the high-level interfaces (DAL::LOFAR_DipoleDataset, DAL::LOFAR_StationGroup). Also consider finally moving the classes from the CR-Tools code branch to DAL/implement.

<hr>

<pre>
From: Lars B"ahren
Date: September 25, 2008 12:47:38 PM GMT+02:00
</pre>

Hey everyone,

since taking over some of the DAL-related duties from Joe, I have been working towards fixing a number of issues and providing a requested functionality of the higher-level data access interfaces.

1) The tool to convert raw TBB data dumps to HDF5 (tbb2h5) no has been switched completely to a Boost-based command line interface, thereby making the passing of parameters considerably simpler and more stable. The required dependency on the Boost program_options library is handled within the USG code base, such that no additional external components are required.

2) I fixed errors in the DAL::TBB class, which resulted in a failure to convert raw TBB data to the HDF5 data format; we ran into this problem when Sef tried to convert some raw data here in Nijmegen. Successful has been done on the file Joe has been providing to Kalpana - a final check will be done using another set of file stored on a machine here in Nijmegen.

3) A small conceptional oversight has been corrected in DAL::dalDataset - already existing datasets are no longer automatically overwritten when creating a new object. However an optional parameter can be used to force re-creation/overwrite.

4) Some of the documentation originally provided with the DAL Manual has been moved to the Doxygen documentation, thereby increasing the visibility and shortening the update cycles.

Next in line are:

1) Add requested functionality to work with beamformed data; while the basic functionality is in place a number of higher level methods are missing, which will enable application programmers to make more efficient usage of the classes.

2) Track configuration/build error reported by John, which will cause a failure to build the DAL at Groningen.


Cheers,

Lars



*/
