/* $Id$ */

/**

\page dal_changelog DAL :: Changelog

<hr>

<pre>
From: Lars B"ahren
Date: October 10, 2008 10:49:33 PM GMT+02:00
</pre>

Hey everybody,

after a some extensive debugging session during the 24 hours here is another set up updates/upgrades to the DAL:

1) The segmentation faults we have been getting yesterday afternoon when trying to extract the data columns from the beam-formed data have been resolved (at least I am pretty sure about this). In order to avoid the related issues I have been cleaning up the interface of the DAL::BeamGroup class quite a bit, similar adjustments have been performed on DAL::BeamFormed. The test programs to the classes should be used as reference when coding against the library - some additional examples have been written up in the Doxygen documentation. The requested methods to support the casacore Vector class will be added next, such that shuffling around of the data outside the DAL should be kept to a minimum.

2) I started merging HDF5Common and Common into a what now is called dalCommon. As discussed with Joe this was a logical step, since it makes no sense to keep these routines stored in different places. As a consequence I already cleaned up the set of routines, as a number of them were present double. One of the hopefully popular features is the overloading of the output operator for std::vector<T>, such that these now can be printed just like casa::Vector<T>.

3) Unified the <tt>-D</tt> pre-compiler flags used for indicating the presence of external components; all appearances of WITH_CASA therefore have been replaced by HAVE_CASA.

Next in line:

1) Track the error in writing string-valued attributes, which results in corrupted metadata to both beam-formed data and TBB times-series. Joe already pointed me to the area where the problem should be located, but another extensive bug-tracking session will be required to resolve this.

2) Implement recursive collection of metadata for TBB time-series data (DAL::TBB_Timeseries, DAL::TBB_StationGroup and DAL::TBB_DipoleDataset), such that those can be exported as a record to be fed to the CR::DataReader header record.

3) Have a look at the report sent in by John; I'd say however that the changes to the Python bindings is something which better should be taken care of by Joe.

<hr>

<pre>
From: Lars B"ahren
Date: October 1, 2008 10:21:07 AM GMT+02:00
</pre>

Hey all,

here is another updates on the recent changes:

1) There has been the long-standing issue of making the high-level methods for the access of TBB time-series dat in HDF5 format part of the DAL; originally - when I started with them - they were part of the CR-Tools. However with the ongoing upgrades to the classes this has been the perfect opportunity to finally collect all the functionality within the DAL: the classes LOFAR_DipoleDataset, LOFAR_StationGroup and LOFAR_Timeseries now have been moved to DAL::TBB_DipoleDataset, DAL::TBB_StationGroup and DAL::TBB_Timeseries - a number of functional upgrades have been done already do allow recursive access to the attributes. Resulting adjustments in the CR-Tools source code have been made already.

2) Inspecting the build logs John sent in, I think I have been able to resolve the problem of num_util not building due to missing the NumPy header files - this is an issue which potentially should show up across all systems unless there is a system-wide NumPy installation in a place where the configuration scripts can pick it up. Since include paths are set during configuration time, the header files must be search for also within the source code tree, because they will be showing up in the installation location only afterwards (essentially it is that one cannot prove for something which has not been created yet).

Next in line:

1) Resolve problem of missing Boost library functionality on a number of machines (including the one in Groningen and in Nijmegen). Since making use of the program_options library to handle command line parameters, we can no longer rely on a system-wide installation, as it typically is older and does not contain the required modules yet.

2) For the TBB time-series data collect start-times of the dumps from the individual dipoles and thereof compute a relative shift between the data channels. Also clean up some of the functions which do recursive collection of attributes to properly support casacore types. In order to better connect to the DataReader framework of the CR-Tools, default constructor and file attachment need to be added.

<hr>

<pre>
From: Lars B"ahren
Date: September 29, 2008 3:19:07 PM GMT+02:00
</pre>

Hey everybody,

time for another DAL updates/changes summary:

1) I now completed the mapping of the HDF5 file structure for beam-formed data onto the set of classes Joe started writing; most important of all now also the missing DAL::BeamSubband objects are created, there allowing access to the (meta-) data of the various sub-bands. A number of additional wrapper functions have been written, which enable to retrieve all values of a certain type (e.g. the center frequency) from the sub-bands within a beam.  Minor adjustments have been made to the constructors, adding a bit more flexibility in how to create a new object.

2) Basic testing of all the high-level interfaces to the beam-formed data is now available; besides serving as test the small programs should also serve a place to look for examples how to code against the C++ interface of the DAL.

3) Methods to provide a basic summary of an object's properties have been added to some more of the DAL core classes, thereby enabling the means for simple diagnostics.

Next in line:

1) Next iteration on the installation problems reported by John.

2) Added extraction of time-shifts between TBB dumbs from individual dipoles to the high-level interfaces (DAL::LOFAR_DipoleDataset, DAL::LOFAR_StationGroup). Also consider finally moving the classes from the CR-Tools code branch to DAL/implement.

<hr>

<pre>
From: Lars B"ahren
Date: September 25, 2008 12:47:38 PM GMT+02:00
</pre>

Hey everyone,

since taking over some of the DAL-related duties from Joe, I have been working towards fixing a number of issues and providing a requested functionality of the higher-level data access interfaces.

1) The tool to convert raw TBB data dumps to HDF5 (tbb2h5) no has been switched completely to a Boost-based command line interface, thereby making the passing of parameters considerably simpler and more stable. The required dependency on the Boost program_options library is handled within the USG code base, such that no additional external components are required.

2) I fixed errors in the DAL::TBB class, which resulted in a failure to convert raw TBB data to the HDF5 data format; we ran into this problem when Sef tried to convert some raw data here in Nijmegen. Successful has been done on the file Joe has been providing to Kalpana - a final check will be done using another set of file stored on a machine here in Nijmegen.

3) A small conceptional oversight has been corrected in DAL::dalDataset - already existing datasets are no longer automatically overwritten when creating a new object. However an optional parameter can be used to force re-creation/overwrite.

4) Some of the documentation originally provided with the DAL Manual has been moved to the Doxygen documentation, thereby increasing the visibility and shortening the update cycles.

Next in line are:

1) Add requested functionality to work with beamformed data; while the basic functionality is in place a number of higher level methods are missing, which will enable application programmers to make more efficient usage of the classes.

2) Track configuration/build error reported by John, which will cause a failure to build the DAL at Groningen.


Cheers,

Lars



*/
