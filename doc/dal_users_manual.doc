/*!
  \page dal_users_manual DAL:: Users Manual

  - \ref dal_um_intro
  - \ref dal_um_motivation
  - \ref dal_um_types
  - \ref dal_um_structure
  - \ref dal_um_examples
    - \ref dal_um_examples_cpp
    - \ref dal_um_examples_python

  <p><hr><p>

  \section dal_um_intro Introduction

  The purpose of this document is to make it easier to work with the LOFAR Data
  Access Library (DAL). This is not intended to be a reference to all the class
  methods. For that purpose see the <a href="http://usg.lofar.org/doxygen">online
  documentation</a>.

  The DAL is both a C++ library (libdal) and a Python module (pydal). The C++
  interface is intended primarily, but not exlusively, for developers. Likewise,
  the python module is intended primarily, but not exlusively, for astronomers.
  The python interface is, and will likely remain, a subset of the methods
  available in C++.

  The \e primary classes in the DAL are: \e dalDataset, \e dalGroup, \e dalTable,
  \e dalColumn, \e dalData, \e dalArray and \e dalFilter. These are the generic
  classes used to operate on a file of an unspecified type.

  A set of \textit{supporting} classes also exist in the DAL, but they are
  generally not interesting to the developer. There purpose is to provide common
  methods used by the primary classes mentioned above. These supporting classes
  are: \e Common, \e Database, and \e HDF5Common.

  Finally, the DAL includes \textit{format-specific} classes. These classes are
  designed to work with a single type of LOFAR data product such as beam-formed or
  transient buffer board data. The format-specific classes are: \e BFRaw,
  \e BeamFormed, \e BeamGroup, \e BeamSubband, \e Enumerations, \e TBB,
  \e dalLopesEvent and \e lopesevent.

This document describes only the \e primary classes.

  \subsection dal_um_note A Note on the Examples

  Please keep in mind that Python examples assume you imported the pydal module:
  \code
  $ python
  > from pydal import *
  \endcode
  C++ examples assume the inclusion of \t dal.h:
  \code
  #include "dal.h"
  \endcode

  For simplicity, none of the examples include error checking on the return
  values.

  <p><hr><p>

  \section dal_um_motivation Motivation

  The purpose of the DAL is to abstract the data product implementation details
  from the user.  In this way, the user can generally ignore the nuances of the
  underlying file format and focus instead on the high level objects reperesented
  therin (i.e. tables, arrays, attributes, etc.).  Although significant, the
  storage mechanism is not scientifically interesting to the typical researcher.

  <p><hr><p>

  \section dal_um_examples Examples

  \subsection dal_um_examples_cpp C++

  <ol>
    <li>Open and read CASA MeasurementSet data.

  <li>Create a (HDF5) integer array within a dataset:
  \code
  dalDataset ds;
  ds.open( FILENAME );

  // define dimensions of array
  vector<int> dims;
  dims.push_back(4);
  dims.push_back(5);
  dims.push_back(6);
  vector<int> cdims;

  int data[4*5*6];
  for (int gg=0; gg<(4*5*6); gg++)
    data[gg] = gg;

  DAL::dalArray * array = ds.createIntArray( "int_array", dims,
                                        data, cdims );
  array->close();
  delete array;
  \endcode

  <li>Create a (HDF5) group:
  \code
  DAL::dalDataset ds;
  ds.open( FILENAME );

  DAL::dalGroup * group = ds.createGroup( "group" );
  group->close();
  delete group;
  \endcode

  <li>Get a list of groups in a file:
  \code
  dalDataset ds;
  ds.open( FILENAME );

  vector<string> groupnames = ds.getGroupNames();

  ds.close();
  \endcode

  <li>Get a list of members of a group:
  \code
  DAL::dalDataset ds;
  ds.open( FILENAME );

  dalGroup * mygroup = ds.openGroup( "groupname" );
  vector<string> memnames = mygroup->getMemberNames();

  ds.close();
  \endcode

  <li>Open an existing group:
  \code
  DAL::dalDataset * ds = new dalDataset;
  ds->open( "somefile.h5" );
  dalGroup * mygroup = ds->openGroup( "groupname" );
  \endcode

  <li>Read an attribute from a dataset:
  \code
  DAL::dalDataset ds;
  ds.open( FILENAME );

  std::string attr_name("INT_ATTR");
  int iattr = 0;

  ds.getAttribute( attr_name, iattr );

  ds.close();
  \endcode

  <li>Read a array dimensions:
  \code
  uint ret = 0;

  DAL::dalDataset ds;
  ds.open( FILENAME );

  DAL::dalArray * array = ds.openArray( "int_array" );

  std::vector<int> dims =  array->dims();

  array->close;
  delete array;
  \endcode
  </ol>

*/