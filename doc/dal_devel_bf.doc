
/*!
  \page dal_devel_bf Working with Beam-Formed Data

  \section dal_devel_bf_icd Data format specification

  The formal specification of the data format can be found in \ref dal_icd_003;
  the document defines the hierarchical structure -- consisting of a number of
  nested groups (much like directories on a UNIX-type system) with metadata 
  attached -- meant to match the layout of the data processing.

  \section dal_devel_bf_structure Creation of the file structure

  The classes representing the individual elements of the hierarchical structure
  are set up such, that recursive creation of structure elements is possible.
  The figure below displays the various elements of the file structure, along
  with the classes of the DAL representing these building blocks:

  \verbatim
  `-- Root group                                  BF_RootGroup
      |-- System log                              
      `-- Primary array pointing group            BF_SubArrayPointing
          `-- Beam group                          BF_BeamGroup
              `-- Stokes dataset                  BF_StokesDataset
  \endverbatim

  In order to allow for the recursive creation of the above structure, the
  individual classes permit the creation of structures at hierarchical levels
  below.

  \section dal_devel_bf_code Code example

  The following code example is taken from test_bf2h5writer.cc, demonstrating
  the basic steps in creating a new BF data set:

  \code
  //____________________________________________________________________________
  // Create DAL::Filename object for generation of proper filename,matching the
  // rules as  defined in ICD-005.

  DAL::Filename filename ("1234567890",
			  "test",
			  DAL::Filename::bf,
			  DAL::Filename::h5);

  //____________________________________________________________________________
  // Set up LOFAR Common Attributes.

  DAL::CommonAttributes attributes (filename);

  //____________________________________________________________________________
  // Create new BF data set; using IO_Mode::Create or IO_Mode::Truncate will
  // cause overwriting an exiting file - if you rather wish to add to an
  // existing data set, use IO_Mode::OpenOrCreate as I/O mode flags.

  DAL::BF_RootGroup rootGroup (attributes,
			       DAL::IO_Mode(DAL::IO_Mode::Create));

  //____________________________________________________________________________
  // Create sub-array pointing direction groups and beam groups; this can be
  // done using a single function call - openBeam(...) - which will create
  // intermediate object in case they are missing.

  const unsigned nofPointings = 5;
  const unsigned nofBeams     = 10;

  for (unsigned numPointing=0; numPointing<nofPointings; ++numPointing) {
    for (unsigned numBeam=0; numBeam<nofBeams; ++numBeam) {
      rootGroup.openBeam ( numPointing, numBeam );
    }
  }
  \endcode
  
  \section dal_devel_bf_hdfview Data inspection using HDFView

  \image html BF_HDFView.png

*/