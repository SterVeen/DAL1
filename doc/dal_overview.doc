// ==============================================================================
//
//  Top-level description of the Data Access Library (DAL)
//
// ==============================================================================

/*!
  \defgroup DAL Data Access Library (DAL)

  - \ref dal_coding_guidelines
  - \ref dal_coding_cpp
    - \ref dal_code_tree
    - \ref dal_compile_link
  - \ref dal_coding_python
  - <a href="http://my.cdash.org/index.php?project=LOFAR%20User%20Software">Testing Dashboard</a>

  <h3>Synopsis</h3>

  The Data Access Library (DAL) is a library that abstracts the underlying
  file format from the user when working with radio astronomy data. Underlying
  formats may include \ref dal_hdf5, AIPS++/CASA tables, \ref dal_fits or specific
  raw formats. This library is available to both the C/C++ developer and the
  Python user via the \e pydal module.

  <table border="0">
    <tr>
      <td class="indexkey">Core library classes</td>
      <td class="indexkey">World coordinates</td>
      <td class="indexkey">Dataset support - common methods</td>
      <td class="indexkey">Dataset support - high-level interfaces</td>
      <td class="indexkey">Application tools</td>
    </tr>
    <tr valign="top">
      <td>
      - DAL::dalArray
      - DAL::dalColumn
      - DAL::dalData
      - DAL::dalDataset
      - DAL::dalFilter
      - DAL::dalGroup
      - DAL::dalTable
      </td>
      <td>
      - DAL::Angle
      - DAL::RaDec
      - DAL::Stokes
      - DAL::Coordinate
      - DAL::DirectionCoordinate
      - DAL::LinearCoordinate
      - DAL::StokesCoordinate
      - DAL::TabularCoordinate
      - DAL::CoordinatesGroup
      </td>
      <td>
      - DAL::CommonAttributes
      - DAL::CommonInterface
      - DAL::HDF5Dataset
      - DAL::HDF5Hyperslab
      - DAL::Filename
      - DAL::Timestamp
      </td>
      <td>
      - DAL::BF_Dataset
      - DAL::BF_SubArrayPointing
      - DAL::BF_Beam
      - DAL::BF_ProcessingHistory
      - DAL::TBB_Timeseries
      - DAL::TBB_StationGroup
      - DAL::TBB_DipoleDataset
      </td>
      <td>
      - bf2h5.cpp
      - tbb2h5.cpp
      </td>
    </tr>
  </table>

  Officially, the DAL supports three file types:
  
  <ul>
    <li><b>HDF5</b> <br>
    Hierarchical Data Format Version 5 (HDF5), is a relatively recent format
    designed with particular attention to efficient operation on extremely large
    data sets.  HDF5 is the intended format for LOFAR data products.  The reasons
    for this decision are given in "Proposed Data Formats"<br>
    HDF5 is organized much like a unix file system.  The internal structure consists
    of a root group, '/', which may recursively contain subgroups.  Each of these
    groups may, in turn, contain other groups or n-dimensional arrays of simple or
    complex datatypes.  HDF5 tables are particular case of a HDF5 array and thus are
    treated in a similar manner.  Almost all objects in a HDF5 file can hold
    associated metadata in the form of an attribute.  For an abbreviated list of
    HDF5 features see "HDF5 vs. CASA Tables".  For a complete
    list see the hdfgroup website.<br>
    HDF5 files can be both read and written by the DAL.

    <li><b>CASA Tables</b> <br>
    CASA Tables in general, and Measurement Sets in particular, are the primary data
    product of the Westerbork Synthesis Radio Telescope (WSRT).  As WSRT is also
    based at ASTRON (where there is a large community of experienced CASA users),
    there is naturally a strong interest and advantage in building upon this
    expertise for LOFAR. <br>
    CASA tables can currently be read, but not written, by the DAL.

    <li><b>FITS</b> <br>
    FITS is the standard astronomical image format.  Among its advantages for
    inclusion in the DAL is its widespread use and extensive toolset.  Among its
    limitations is the fact that it was not designed for large and complex
    datasets. <br>
    FITS is the lowest of priority of the three supported formats and currently
    has almost no actual support in the DAL.
  </ul>

  At present, each of these file types have varying levels of support.

*/

// ==============================================================================
//
//  Group definitions
//
// ==============================================================================

//_______________________________________________________________________________
//                                                                           core

/*!
  \defgroup core DAL :: Core library classes
  \ingroup DAL
  \brief Core classes of the Data Access Library
*/

//_______________________________________________________________________________
//                                                                    coordinates

/*!
  \defgroup coordinates DAL :: Coordinates
  \ingroup DAL
  \brief Coordinates that serve to locate a measurement in some multidimensional parameter space

  <h3>Prerequisite</h3>
    
  <ul type="square">
    <li>E. W. Greisen & M. R. Calabretta (2002) Representations of world
    coordinates in FITS. A&A, \b 395, p. 1061-1075.
    <li>M. R. Calabretta & E. W. Greisen (2002) Representations of celestial
    coordinates in FITS, A&A, \b 395, p. 1077-1122.
    <li>E. W. Greisen, M. R. Calabretta, F. G. Valdes, & S. L. Allen, (2006)
    Representations of spectral coordinates in FITS. A&A, \b 446, p. 747-771.
    <li>L. B&auml;hren, A. Alexov, K. Anderson, J.-M. Grie&szlig;meier, (2010)
    LOFAR Data Format ICD: Representations of World Coordinates, LOFAR-USG-ICD-002
  </ul>
    
*/

//_______________________________________________________________________________
//                                                                    data_common

/*!
  \defgroup data_common DAL :: Dataset support - common functionality
  \ingroup DAL
  \brief Common (low-level) support for the various types of datasets

  The \b data_common directory collects a number of classes and routines, which
  act as a foundation to the various classes providing a high-level interface
  to access LOFAR standard datasets.

  The more specific classes cover the creation of and interaction with HDF5 data
  structures:
  - DAL::HDF5Dataset
  - DAL::HDF5Hyperslab
  - DAL::HDF5Table
*/

//_______________________________________________________________________________
//                                                                        data_hl

/*!
  \defgroup data_hl DAL :: Dataset support - high-level interfaces
  \ingroup DAL
  \brief High-level dataset interfaces to the various types of datasets
*/

//_______________________________________________________________________________
//                                                                           apps

/*!
  \defgroup dal_apps DAL :: Application collection
  \ingroup DAL
  \brief Application programs build in top of the DAL 
*/

//_______________________________________________________________________________
//                                                                       bindings

/*!
  \defgroup pydal DAL :: Python module
  \ingroup DAL
  \brief Python bindings to the C++ library

  How to create bindings for a new C++ class:

  <ol>
    <li>Add function prototype to <tt>pydal.h</tt>:
    \code
    //! Bindings for DAL::Angle
    void export_Angle ();
    \endcode
    <li>Call to the previously defined function from <tt>pydal.cc</tt>:
    \code
    export_Angle ();  
    \endcode
    <li>Implement the function wrapping the C++ class:
    \code
#include <Angle.h>

void export_Angle ()
{
  //________________________________________________________
  // Specialisation of overloaded methods

  void (Angle::*summary1)() 
    = &Angle::summary;
  void (Angle::*summary2)(std::ostream &) 
    = &Angle::summary;

  //________________________________________________________
  // Bindings for class and its methods

  bpl::class_<Angle>("Angle")
    // Construction
    .def( bpl::init<>())
    .def( bpl::init<double const &, bool const &>())
    .def( bpl::init<Angle>())
    // Parameter access
    .def("setAngle", &Angle::setAngle, "Set the angle.")
    .def("rad",      &Angle::rad,      "Get the angle in radian.")
    .def("deg",      &Angle::deg,      "Get the angle in degrees.")
    .def("hms",      &Angle::hms,      "Get the angle as formatted string (HH:MM:SS)")
    .def("className",
	 &Angle::className,
	 "Get the name of the class.")
    // Methods
    .def("summary",
	 summary1,
	 "Summary of the object's internal parameters and status.")
    .def("summary",
	 summary2,
	 "Summary of the object's internal parameters and status.")
    ;
}
    \endcode
    In order to reduce compile time, the wrapping functions are distributed
    w.r.t. the DAL module the class resides in. In the above example the
    function will be implemented in <tt>pydal_coordinates.cc</tt> as the class
    DAL::Angle is part of the \e coordinates module.
  </ol>
    
*/
