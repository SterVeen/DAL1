
/*!

  \page dal_install Installation instructions

  <ul>
    <li>\ref dal_get_sources
    <li>\ref dal_codebase
    <li>\ref dal_external_packages
    <li>\ref dal_configure_build
    <li>\ref dal_install_configurations
  </ul>

  \section dal_get_sources Getting the source code

  As of Feb 15, 2001 the DAL can be cloned directly from the master repository
  hosted on <a href="https://github.com">Github</a>:

  \verbatim 
  git clone https://github.com/nextgen-astrodata/DAL.git DAL
  \endverbatim

  Once your checkout from the Git repository is complete, follow the
  instructions as described in the section \ref dal_configure_build below.

  \section dal_codebase Organization of the source code

  The components of the DAL is organized into the following directory structure:

  \verbatim
  DAL
  |-- build
  |-- cmake
  |-- data                     ..   Reference data sets used for rest programs.
  |-- doc                      ..   Documentation.
  |    |-- developer
  |    |-- figures
  |    `-- user
  `-- src
        |-- apps               ..   Application programs build on top of the library.
        |-- dal
        |    |-- core          ..   Core library classes
        |    |    `-- test
        |    |-- coordinates   ..   Representation of world coordinates
        |    |    `-- test
        |    |-- data_common   ..   Common functionality for datasets
        |    |    `-- test
        |    `-- data_hl       ..   High-level interfaces to datasets
        |          `-- test
        |-- pydal              ..   Bindings to the Python scripting language
        |     `-- test
        `-- test
              |-- hdf5
              |-- python
              `-- swig
  \endverbatim

  \section dal_external_packages External dependencies

  As the DAL is considered as an abstraction layer (at least to a considerable
  degree), external dependencies include low-level libraries to which a common
  interface is being provided.
  
  <table>
    <tr>
      <td class="indexkey">Package</td>
      <td class="indexkey">Version</td>
      <td class="indexkey">Status</td>
    </tr>
    <tr valign="top">
      <td><a href="http://www.cmake.org">CMake</a></td>
      <td>>=2.6</td>
      <td>required</td>
    </tr>
    <tr valign="top">
      <td><a href="http://www.hdfgroup.org/HDF5">HDF5</a></td>
      <td>>=1.8.3</td>
      <td>required</td>
    </tr>
    <tr valign="top">
      <td><a href="http://code.google.com/p/casacore">casacore</a></td>
      <td>SVN trunk</td>
      <td>optional, required for MS</td>
    </tr>
    <tr valign="top">
      <td><a href="http://www.atnf.csiro.au/people/mcalabre/WCS">WCSLIB</a></td>
      <td>>=4.2</td>
      <td>optional, required for casacore</td>
    </tr>
    <tr valign="top">
      <td><a href="http://heasarc.gsfc.nasa.gov/fitsio">CFITSIO</a></td>
      <td>>=3.0</td>
      <td>optional, required for casacore</td>
    </tr>
    <tr valign="top">
      <td><a href="http://www.boost.org">Boost++</a></td>
      <td>>=1.40.0</td>
      <td>optional, required for Python bindings</td>
    </tr>
    <tr valign="top">
      <td><a href="http://www.python.org">Python</a></td>
      <td>>= 2.6</td>
      <td>optional, required for Python bindings</td>
    </tr>
    <tr>
      <td><a href="http://www.doxygen.org">Doxygen</a></td>
      <td>>=1.6</td>
      <td>optional, required for source code documentation</td>
    </tr>
  </table>

  \section dal_configure_build Configuration and build

  The DAL uses the CMake (http://www.cmake.org) Cross-Platform Makefile Generator
  for configuration and control of the build.

  Once your checkout from the Git repository is complete you will have a directory
  structure on disk as described in section \ref dal_codebase above.

  \verbatim
  cd DAL
  mkdir build
  cd build
  cmake ..
  make
  \endverbatim

  The default installation location is "/opt/dal"; if you want to change this,
  you can tell CMake so by using
  \verbatim
  cmake -DDAL_INSTALL_PREFIX=<installation prefix> ..
  \endverbatim
  For further details consult section \ref dal_install_configurations below

  The CMake scripts will check a number of standard locations for the required
  3-party packages (such as Boost, HDF5, etc.), but if you are using a custom
  version installed at a non-standard location, you might need to aid CMake in
  finding all required components:

  \verbatim
  cmake -DHDF5_ROOT_DIR=<basedir of HDF5 install> -DCASACORE_ROOT_DIR=<basedir of casacore install> ..
  \endverbatim

  In general CMake cache entries are passed through the 

  \verbatim
  -D <var>:<type>=<value>
  \endverbatim

  command line syntax. The following options/cache variables can be used to 
  configure the DAL build:

  <table>
    <tr>
      <td class="indexkey">Description</td>
      <td class="indexkey">Command-line option</td>
    </tr>
    <tr>
      <td>DAL installation prefix</td>
      <td><tt>-D DAL_INSTALL_PREFIX=<path></tt></td>
    </tr>
    <tr>
      <td>Generate documentation (API description and user's manual)</td>
      <td>-D DAL_WITH_DOCUMENTATION={YES|NO}</td>
    </tr>
    <tr>
      <td>Enable/disable code debugging messages</td>
      <td><tt>-D DAL_WITH_MYSQL={YES|NO}</tt></td>
    </tr>
    <tr>
      <td>Root directory of Boost++ library install</td>
      <td><tt>-D BOOST_ROOT_DIR=<path></tt></td>
    </tr>
    <tr>
      <td>Root directory of casacore library install</td>
      <td><tt>-D CFITSIO_ROOT_DIR=<path></tt></td>
    </tr>
    <tr>
      <td>Root directory of CFITSIO library install</td>
      <td><tt>-D CFITSIO_ROOT_DIR=<path></tt></td>
    </tr>
    <tr>
      <td>Root directory of HDF5 library install</td>
      <td><tt>-D HDF5_ROOT_DIR=<path></tt></td>
    </tr>
    <tr>
      <td>Root directory of Python install</td>
      <td><tt>-D PYTHON_ROOT_DIR=<path></tt></td>
    </tr>
    <tr>
      <td>Root directory of WCSLIB library install</td>
      <td><tt>-D WCSLIB_ROOT_DIR=<path></tt></td>
    </tr>
  </table>

  \section dal_install_configurations Installation configurations

  In order to allow for the necessary amount of fine-tuning, we need the
  equivalent of commonly use configuration and install options:

  \verbatim
  --prefix=PREFIX         install architecture-independent files in PREFIX
  --bindir=DIR            user executables [EPREFIX/bin]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/PACKAGE]
  \endverbatim

  The specific choice of configuration and install options will depent on the 
  circumstances and permissions:

  <ol>

    <li><b>Default settings.</b> <br>
     In order to maintain compatibility with the
     <a href="http://www.pathname.com/fhs">Filesystem Hierarchy Standard</a>
     (FHS) the following <b>default installation layout</b> -- that is if no
     further command line parameter has been provided -- has been defined:
     \verbatim
     /opt
     `--dal                       DAL_INSTALL_PREFIX       
        |-- bin                   DAL_INSTALL_BINDIR       = DAL_INSTALL_PREFIX/bin
        |-- include               DAL_INSTALL_INCLUDEDIR   = DAL_INSTALL_PREFIX/include
        |-- lib                   DAL_INSTALL_LIBDIR       = DAL_INSTALL_PREFIX/lib
        `-- share                 DAL_INSTALL_DATAROOTDIR  = DAL_INSTALL_PREFIX/share
            `-- doc               DAL_INSTALL_DOCDIR       = DAL_INSTALL_DATAROOTDIR/doc
                `-- html
     \endverbatim

    <li><b>Custom installation prefix.</b> <br>
     In order to root the above described directory structure at a different
     location with in the file-system (e.g. "/usr/local"), use
     \verbatim
     -D DAL_INSTALL_PREFIX=<prefix>
     \endverbatim
     The resulting installation -- unless also specifying some of the individual
     directories -- wil look as follows:
     \verbatim
     /usr/local                         DAL_INSTALL_PREFIX
     |-- bin                            DAL_INSTALL_BINDIR
     |-- include
     |   `-- dal                        DAL_INSTALL_INCLUDEDIR
     |       |-- coordinates
     |       |-- core
     |       |-- data_common
     |       `-- data_hl
     |-- lib                            DAL_INSTALL_LIBDIR
     `-- share
         `-- dal                        DAL_INSTALL_DATAROOTDIR
	     `-- doc                    DAL_INSTALL_DOCDIR
	         `-- html
     \endverbatim

    <li><b>Installation as part of the LUS.</b> <br>
     In order to simplify installation of the DAL as part of the LOFAR User
     Software distribution, a preset has been defined which can be used through
     \code
     -D LUS_INSTALL_PREFIX=<prefix>
     \endcode
     where <prefix>=$LOFARSOFT/release. The resulting installation will look as
     follows:
     \verbatim
     $LOFARSOFT/release                 DAL_INSTALL_PREFIX
     |-- bin                            DAL_INSTALL_BINDIR
     |-- include
     |   `-- dal                        DAL_INSTALL_INCLUDEDIR
     |       |-- coordinates
     |       |-- core
     |       |-- data_common
     |       `-- data_hl
     |-- lib                            DAL_INSTALL_LIBDIR
     `-- share
         `-- dal                        DAL_INSTALL_DATAROOTDIR
	     `-- doc                    DAL_INSTALL_DOCDIR
	         `-- html
     \endverbatim
  </ol>

 */