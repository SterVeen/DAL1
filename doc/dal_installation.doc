
/*!

  \page dal_install Installation instructions

  <ul>
    <li>\ref dal_get_sources
    <li>\ref dal_codebase
    <li>\ref dal_external_packages
    <li>\ref dal_configure_build
  </ul>

  \section dal_get_sources Getting the source code

  As of Feb 15, 2001 there are two ways in which to retrieve, build and install
  the DAL:

  <ol>
    <li>From the original source repository on Github.

    In order to build the DAL as a stand-alone library, clone directly from the
    repository on Github:

    \verbatim 
    git clone https://github.com/nextgen-astrodata/DAL.git DAL
    \endverbatim

    Once your checkout from the Git repository is complete, follow the
    instructions as described in the section \ref dal_configure_build below.

    <li>As part of the LOFAR User Software (LUS).

    If you want (or need) to use the DAL as part of the LUS software collection,
    check out a working copy of the code base from the LUS Subversion repository

    \verbatim
    svn co http://usg.lofar.org/svn/code/trunk lofarsoft
    \endverbatim   

    Once the checkout is complete (assuming bash as shell):

    \verbatim
    cd lofarsoft
    export LOFARSOFT=`pwd`
    . ./devel_common/scripts/init.sh
    cd build
    ./bootstrap
    make dal
    \endverbatim

    By default build of the DAL will be carried out from a source tar-archive
    which comes as part of the software collection.
  </ol>

  \section dal_codebase Organization of the source code

  The components of the DAL is organized into the following directory structure:

  \verbatim
  DAL
  |-- implement           ..   Library source code for libdal and pydal.
  |   |-- core            ..   Core library classes
  |   |-- coordinates     ..   Representation of world coordinates
  |   |-- data_common     ..   Common functionality for datasets
  |   |-- data_hl         ..   High-level interfaces to datasets
  |   `-- bindings        ..   Bindings to scripting languages
  |-- test                ..   Test programs for library C++ classes.
  |-- apps                ..   Application programs build on top of the library.
  |-- doc                 ..   Documentation.
  `-- data                ..   Reference data sets used for rest programs.
  \endverbatim

  \section dal_external_packages External dependencies
  
  <table>
    <tr>
      <td class="indexkey">Package</td>
      <td class="indexkey">Version</td>
      <td class="indexkey">Status</td>
      <td class="indexkey">Download from...</td>
    </tr>
    <tr>
      <td>CMake</td>
      <td>>=2.6</td>
      <td>required</td>
      <td>http://www.cmake.org</td>
    </tr>
    <tr>
      <td>HDF5</td>
      <td>>=1.8.3</td>
      <td>required</td>
      <td>http://www.hdfgroup.org/HDF5</td>
    </tr>
    <tr>
      <td>casacore</td>
      <td>??</td>
      <td>optional, required for MS</td>
      <td>http://code.google.com/p/casacore</td>
    </tr>
    <tr>
      <td>WCSLIB</td>
      <td>>=4.2</td>
      <td>optional, required for casacore</td>
      <td>http://www.atnf.csiro.au/people/mcalabre/WCS</td>
    </tr>
    <tr>
      <td>CFITSIO</td>
      <td>>=3.0</td>
      <td>optional, required for casacore</td>
      <td>http://heasarc.gsfc.nasa.gov/fitsio</td>
    </tr>
    <tr>
      <td>Boost++</td>
      <td>>=1.40.0</td>
      <td>optional, required for Python bindings</td>
      <td>http://www.boost.org</td>
    </tr>
    <tr>
      <td>Python</td>
      <td>??</td>
      <td>optional, required for Python bindings</td>
      <td>http://www.python.org</td>
    </tr>
    <tr>
      <td>Doxygen</td>
      <td>>=1.6</td>
      <td>optional, required for source code documentation</td>
      <td>http://www.stack.nl/~dimitri/doxygen</td>
    </tr>
  </table>

  \section dal_configure_build Configuration and build

  The DAL uses the CMake (http://www.cmake.org) Cross-Platform Makefile Generator
  for configuration and control of the build.

  Once your checkout from the Git repository is complete you will have a directory
  structure on disk as described in section \ref dal_codebase above.

  \verbatim
  cd DAL
  mkdir build
  cd build
  cmake ..
  make
  \endverbatim

  The default installation location is "/usr/local"; if you want to change this,
  you can tell CMake so by using

  \verbatim
  cmake -DCMAKE_INSTALL_PREFIX=<installation prefix> ..
  \endverbatim

  The CMake scripts will check a number of standard locations for the required
  3-party packages (such as Boost, HDF5, etc.), but if you are using a custom
  version installed at a non-standard location, you might need to aid CMake in
  finding all required components:

  \verbatim
  cmake -DHDF5_ROOT_DIR=<basedir of HDF5 install> -DCASACORE_ROOT_DIR=<basedir of casacore install> ..
  \endverbatim

 */