/* $Id$ */

/**

\page dal_changes DAL :: Required and requested changes

<hr>

  - \ref dal_changes_build
  - \ref dal_changes_testing
  - \ref dal_changes_cpp
  - \ref dal_changes_python
  - \ref dal_changes_tools
  - \ref dal_changes_documentation

<hr>

\section dal_changes_build Configuration & Build

<ol>
  <li>Adjust the -D compiler flags used for indicating if a external component (such as casacore or HDF5) can
  be used; the compiler flags used should be the same ones as used in the external code itself, such that we
  can use one and the dame switch.
  - -DWITH_BOOST -> -DHAVE_BOOST
  - -DWITH_CFITSIO -> -DHAVE_CFITSIO
  <li>I've been unable to make a clean build of the DAL. Not only on the (somewhat misconfigured) machines in
  Nijmegen, but also not on a clean SUSE 10.3. To me it seems to be connected to using a newer  version of boost.
  If boost 1.33 from the system is used, I get error messeages during compilation, if I (try to) force it to use
  the boost from the  "usg/external" tree or a freshly installed boost 1.36, then I get errors during  linking. (If
  you want the exact error messages, mail me.) -- A. Horneffer (01/10/2008)
  <li>Conflicting Boost library versions lead to failure to build the applications using \e program_options
  library:
  \verbatim
  Linking CXX executable bf2h5
  /usr/local/lib/libboost_unit_test_framework-gcc.so: undefined reference to `init_unit_test_suite(int, char**)'
  collect2: ld returned 1 exit status
  make[2]: *** [apps/bf2h5] Error 1
  make[1]: *** [apps/CMakeFiles/bf2h5.dir/all] Error 2
  make: *** [all] Error 2
  \endverbatim
  Looks like we also need to build that library ourselves to ensure nothing funny happens along the way; for
  information on how to build the library consult <tt>boost/libs/test/build/Jamfile.v2</tt>:
  \verbatim
  UTF_SOURCES =
	compiler_log_formatter
	debug
	exception_safety
	execution_monitor
	framework
	interaction_based
	logged_expectations
	plain_report_formatter
	progress_monitor
	results_collector
	results_reporter
	test_tools
	unit_test_log
	unit_test_main
	unit_test_monitor
	unit_test_parameters
	unit_test_suite
	xml_log_formatter
	xml_report_formatter
	;

  lib boost_prg_exec_monitor : $(PRG_EXEC_MON_SOURCES).cpp ;

  lib boost_test_exec_monitor : $(TEST_EXEC_MON_SOURCES).cpp : <link>static ;

  lib boost_unit_test_framework : $(UTF_SOURCES).cpp ;
  \endverbatim
  <li>John McFarland reports the following build errors for version 2049:
  - Failure caused by HDF5 interface version
  \verbatim
  usg/src/DAL/implement/dalArray.cpp: In constructor `DAL::dalFloatArray::dalFloatArray(hid_t, std::string, std::vector<int, std::allocator<int> >, float*, std::vector<int, std::allocator<int> >)':
  usg/src/DAL/implement/dalArray.cpp:1066: warning: passing NULL used for non-pointer converting 6 of `hid_t H5Dcreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/dalArray.cpp:1066: warning: passing NULL used for non-pointer converting 7 of `hid_t H5Dcreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/dalArray.cpp:1082: warning: passing NULL used for non-pointer converting 6 of `hid_t H5Dcreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/dalArray.cpp:1082: warning: passing NULL used for non-pointer converting 7 of `hid_t H5Dcreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/dalArray.cpp: In member function `void DAL::dalArray::extend_boost(boost::python::list)':
  usg/src/DAL/implement/dalArray.cpp:1432: error: `len' is not a member of `bpl'
  usg/src/DAL/implement/Common.h: In function `bool DAL::h5setAttribute(const hid_t&, hid_t, std::string, T*, int) [with T = char]':
  usg/src/DAL/implement/dalArray.cpp:447:   instantiated from here
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 5 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 6 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h: In function `bool DAL::h5setAttribute(const hid_t&, hid_t, std::string, T*, int) [with T = short int]':
  usg/src/DAL/implement/dalArray.cpp:463:   instantiated from here
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 5 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 6 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h: In function `bool DAL::h5setAttribute(const hid_t&, hid_t, std::string, T*, int) [with T = int]':
  usg/src/DAL/implement/dalArray.cpp:479:   instantiated from here
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 5 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 6 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h: In function `bool DAL::h5setAttribute(const hid_t&, hid_t, std::string, T*, int) [with T = uint]':
  usg/src/DAL/implement/dalArray.cpp:495:   instantiated from here
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 5 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 6 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h: In function `bool DAL::h5setAttribute(const hid_t&, hid_t, std::string, T*, int) [with T = long int]':
  usg/src/DAL/implement/dalArray.cpp:511:   instantiated from here
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 5 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 6 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h: In function `bool DAL::h5setAttribute(const hid_t&, hid_t, std::string, T*, int) [with T = float]':
  usg/src/DAL/implement/dalArray.cpp:527:   instantiated from here
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 5 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 6 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h: In function `bool DAL::h5setAttribute(const hid_t&, hid_t, std::string, T*, int) [with T = double]':
  usg/src/DAL/implement/dalArray.cpp:543:   instantiated from here
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 5 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/src/DAL/implement/Common.h:100: warning: passing NULL used for non-pointer converting 6 of `hid_t H5Acreate2(hid_t, const char*, hid_t, hid_t, hid_t, hid_t)'
  usg/release/lib/python2.3/site-packages/numpy/core/include/numpy/__multiarray_api.h: At global scope:
  usg/release/lib/python2.3/site-packages/numpy/core/include/numpy/__multiarray_api.h:959: warning: 'int _import_array()' defined but not used
  make[2]: *** [implement/CMakeFiles/pydal.dir/dalArray.cpp.o] Error 1
  make[1]: *** [implement/CMakeFiles/pydal.dir/all] Error 2
  make: *** [all] Error 2
  \endverbatim
</ol>

<hr>

\section dal_changes_testing Testing of library components and tools

- The various Python data inspection scripts need to be added to the list of \e
ctest driven tests such that we can track errors there as well.
- We need a commonly availabe set of input data files for the test programs,
such that we can run the same set of tests on the various platforms. Suggested
solution is to create tar-ball containing a collection of such datasets, which
then can be obtained from the \e download area on the USG server.
\verbatim
total 4513632
drwxr-xr-x   39 lars  lars        1326 Sep 24 12:09 L2007_01810_SB18-20_OB20.MS
-rw-r--r--    1 lars  lars       35872 Sep 24 12:19 L2007_01810_SB18-20_OB20.MS.h5
-rw-r--r--    1 lars  lars  1016092752 Jul  9 16:57 bf_20080604_121337.cor
-rw-rw-rw-    1 lars  lars  1019864744 Sep 24 12:19 bf_20080604_121337.cor.h5
-rw-r--r--    1 lars  lars   140247040 Jul  9 16:57 rw_20080604_122217_2300.dat
-rw-r--r--    1 lars  lars   134731928 Jul 12 17:40 rw_20080604_122217_2300.dat.h5
\endverbatim
- Need test FITS dataset.

<hr>

\section dal_changes_cpp Issues with the C++ interface

- Make sure all classes provide at least a basic <tt>summary()</tt> method to display the status
  of internal parameters.

- currently there are two files collecting a number of commonly used functions
  (HDF5Common.h and Common.h); we should merge them at some point.

- DAL::BeamFormed
  - add method to retrieve ADC sample frequency

- DAL::BeamGroup
  - get* methods don't raise Exceptions, only return default arrays
  - Add method(s) to retrieve all channels of a correlation product (Intensity,
  X, Y, etc.)
  - add methods supporting std::vector and casa::Vector
  - method to retrieve all entries for a subband fails (segfault)

- DAL::BeamSubband
  - currently has no methods to actually create a valid object connected to the
  subband table data within the dataset.
  - is there really a need to store fileID and groupID? All we actually need is
  the tableID.

- DAL::dalTable
  - need additional constructor to create table using group ID (in which the
  table is contained) and table name. -> basic implementation is done, final
  testing of internal initialization pending
  - Add methods to retrieve length of data columns
  - add opional parameter to control potential overwriting of existing table
  - rename getName() to printName(), since the current name of the method is 
  misleading.

- DAL::TBB_Timeseries
  - DAL::TBB_Timeseries::channelNames () not yet implemented - currently there is
  only an empty function as placeholder to avoid linking errors.

- DAL::TBB_StationGroup
  - DAL::TBB_StationGroup::channelNames() currently only implemented for
  std::vector<std::string> -> need to implement casa::Vector<casa::String>
  variant as well
  - Collect start-times of the dumps from the individual dipoles and thereof compute a
  relative shift between the data channels.

- DAL::TBB
  - We need to implement a frame buffer, which can be used to reorder incoming
  frames if necessary; even though raw frames may be arriving in chronological
  order for most of the time, this by no means is a globally valid assumption.
  Check whether or not some of the ideas implemented in tbbctlResort.cc can be
  used.

<hr>

\section dal_changes_python Issues with the Python interface

<ol>
  <li>The <tt>POL_RESPONSE</tt> column of the <tt>FEED(1,2)</tt> table gives the
  following error when its data is accessed:
  \verbatim
   ERROR: Slicer error:length<0
  i.e.
  > from pydal import *
  > ds = dalDataset()
  > ds.open('data/lofar/cs1/L2007_01810_SB18-20_OB20.MS')
  0
  > feed1 = ds.openTable('FEED1')
  > pr = feed1.getColumn('POL_RESPONSE')
  > pr.shape()
  ([16, 2, 2],)
  > pr_data = pr.data()
  ERROR: Slicer error:length<0
  \endverbatim
  Also...
  \verbatim
  > pr_data = pr.data(1)
  ERROR: ArrayBase::validateConformance
  \endverbatim
  
  <li>If we open a table, for example \verb|OBSERVATION|, then DAL crashes when
  we access the \verb|LOG| column.
  \verbatim
  ERROR: Table DataManager error: Invalid
  operation: SSMIndStringColumn::getShape: no array in row 0
  \endverbatim

  <li>Some methods are not implemented, like \verb|readRows()| of a table.
  \verbatim
  Operation not yet supported for type MSCASA.  Sorry.
  \endverbatim

  <li>Unable to retrieve attribute <tt>MS_VERSION</tt> from MeasurementSet:
  \verbatim
  > main.getColumn('MS_VERSION')
  ERROR: Table column MS_VERSION is unknown
  > main.getAttribute('MS_VERSION')
  Operation not yet supported for type MSCASA.  Sorry.
  > main.getAttributes()
  Operation not yet supported for type MSCASA.  Sorry.
  \endverbatim

  <li>The following methods work, but may have unexpected or unusual behavior:
    - bandwidth
    - beams
    - breaks
    - datatype
    - dispersion_measure
    - emband
    - epoch_date
    - epoch_utc
    - getBeam
    - DAL::BeamGroup.ra
    - DAL::BeamGroup.dec
    - DAL::BeamGroup.n_subbands
    - DAL::BeamGroup.summary
    - DAL::BeamFormed.main_beam_diam
    - DAL::BeamFormed.notes
    - DAL::BeamFormed.nofStations
    - number_of_*
    - observation_id
    - observer, point_*
    - proj_id
    - sampling_time
    - source
    - sub_beam_diameter
    - telescope
    - weather_*
</ol>

<hr>

\section dal_changes_tools Issues with the application executables

- Consider switching all command line parameter handling to Boost \e
  program_options interface; a first implementation example can be found in
  tbb2h5.cpp
  - bf2h5.cpp

<hr>

\section dal_changes_documentation Documentation

- change name of source file: dal_file_formats.doc -> dal_data_formats.doc

*/
