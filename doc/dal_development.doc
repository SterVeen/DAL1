
/*!

  \page dal_devel Developer guide

  <ul>
    <li>\ref dal_devel_git
    <li>\ref dal_devel_conventions
    <li>\ref dal_devel_classes
  </ul>

  \section dal_devel_git Working with Git

  If you are looking at this document, the best chance is that you already know
  a certain minimum about using <a href="http://git-scm.com">Git</a>, as chances
  are good you have retrieve your working copy of the source code from cloning
  off the DAL \e Git repository. However if this essentially is it, you will
  need to learn a few basic program instructions and concepts to set up an
  everyday work-flow when actively contributing to the development of the DAL.

  <ul>
    <li>Revert changes done to a file:
    \code
    git checkout -- <file>
    \endcode
  </ul>

  \section dal_devel_conventions Coding conventions

  No formal coding guidelines have been set up for the development of the DAL,
  though a few reasonable conventions should be adhered to in order to keep the 
  code readable and consistent:

  <ol>
    <li>All classes reside within the namespace "DAL".

    <li>All source files contain a Doxygen-based documentation of their methods.
    All classes/files are contained within the group "DAL".

    <li>Private variables are indicated by the prefix "its", in order to distringuish
    them from temporary/local variables, e.g.
    \code
    \param itsLength - private data member
    \param length    - local variable or function parameter
    \endcode
    <li>Pointers should be marked by a trailing "_p"; e.g. a dynamically allocated
    array of "data" would become  "itsData_p".
  </ol>

\section dal_devel_classes Creating a new class

<ul>

  <li>For each new class included into the library (\e libdal) at least two
  files are created:
  <ol>
    <li>Header file (e.g. \e dalDataset.h) containing function prototypes and
	declarations.
	<li>Implementation file (e.g. \e dalDataset.cpp) containing the actual
	implementation of functions	and methods.
  </ol>

  <li>All classes included into the library are enclosed in the \e DAL
  namespace: in the header file -
  \code
  namespace DAL {
  
    class dalDataset {
	};
  
  }
  \endcode
  and in the implementation file
  \code
  namespace DAL {
  
    dalDataset::dalDataset () {};
  
  }
  \endcode

  <li>Include guards in the header file -
  \code
  #ifndef DALDATASET_H
  #define DALDATASET_H
  
  namespace DAL {
  
  }
  
  #endif
  \endcode
  and in the implementation file -
  \code
  #ifndef DALDATASET_H
  #include "dalDataset.h"
  #endif
  
  namespace DAL {
  
  }
  \endcode
  
  <li>Make private variables of the class distinguishable from either temporary local ones and
  function parameters:
  \code
  bool openFile (const string &filename)
  {
    bool status (true);
  
    if ( h5fh_p = H5Fopen(filename, H5F_ACC_RDWR, H5P_DEFAULT ) > 0 ) {
	  filename_p = filename;
	} else {
	  status = false;
	}

    return status;  
  }
  \endcode
  So in this example both \e filename_p and \e h5fh_p would be private variables, \e filename
  a function parameter and \e status variable local to the function.
  
  <li>Parameters/variables of functions and methods should be given as one per
  line:
  \code
  dalDataset::dalDataset( const char * dsname,
                          std::string filetype,
                          const bool &overwrite)
  \endcode

  <li>Both header and implementation file should contain a GNU GPL License
  header:
  \code
  /*-------------------------------------------------------------------------*
   | $Id:: dalDataset.h 1378 2008-04-01 16:47:06Z baehren                  $ |
   *-------------------------------------------------------------------------*
   ***************************************************************************
   *   Copyright (C) 2008                                                    *
   *   <Name author> (<Email author>)                                        *
   *                                                                         *
   *   This program is free software; you can redistribute it and/or modify  *
   *   it under the terms of the GNU General Public License as published by  *
   *   the Free Software Foundation; either version 2 of the License, or     *
   *   (at your option) any later version.                                   *
   *                                                                         *
   *   This program is distributed in the hope that it will be useful,       *
   *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
   *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
   *   GNU General Public License for more details.                          *
   *                                                                         *
   *   You should have received a copy of the GNU General Public License     *
   *   along with this program; if not, write to the                         *
   *   Free Software Foundation, Inc.,                                       *
   *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
   ***************************************************************************/
  \endcode

<ul>


*/