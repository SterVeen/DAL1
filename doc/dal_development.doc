
/*!

  \page dal_devel Developer guide

  <ul>
    <li>\ref dal_devel_git
    <li>\ref dal_devel_cmake
    <li>\ref dal_devel_releases
    <li>\ref dal_devel_conventions
    <li>\ref dal_devel_classes
  </ul>

  \section dal_devel_git Basic Git Workflow

  If you are looking at this document, the best chance is that you already know
  a certain minimum about using <a href="http://git-scm.com">Git</a>, as chances
  are good you have retrieve your working copy of the source code from cloning
  off the DAL \e Git repository. However if this essentially is it, you will
  need to learn a few basic program instructions and concepts to set up an
  everyday work-flow when actively contributing to the development of the DAL.

  \b Notation: This document uses ascii-art to depict commit history:

  <table border=0>
    <tr>
      <td class="indexkey">Branch name</td>
      <td class="indexkey">Branch name</td>
      <td class="indexkey">Commit with parent in same branch</td>
      <td class="indexkey">Commit with parent in another branch</td>
      <td class="indexkey">Commit with two parents (merge)</td>
      <td class="indexkey">Commit with arbitrary ancestry</td>
    </tr>
    <tr>
      <td>
      \verbatim
      master
      \endverbatim
      </td>
      <td>
      \verbatim
      *master
      \endverbatim
      </td>
      <td>
      \verbatim
      ----o
      \endverbatim
      </td>
      <td>
      \verbatim
      \
       o
      \endverbatim
      </td>
      <td>
      \verbatim
      ----o
         /
      \endverbatim
      </td>
      <td>
      \verbatim
      ...o
      \endverbatim
      </td>
    </tr>
  </table>

  Topic branches generally consist of a linear sequence of commits forked off
  an integration branch:
  \verbatim
  ...o                    master
      \
       o----o----o----o   topic
  \endverbatim
  Integration branches generally consist of a sequence of merge commits:
  \verbatim
          ...o      ...o     topic1
              \         \
  ...o----o----o----o----o   master
         /         /
     ...o      ...o          topic2
  \endverbatim
  
  \b Disclaimer: Some basic techniques and concepts of the workflow described
  here are derived from the <a href="http://public.kitware.com/Wiki/Git/Workflow/Topic">corresponding page on the Kitware Wiki</a>.

  <table border=0 width=90%>
    <tr>
      <td class="indexkey">Description</td>
      <td class="indexkey">Actions</td>
      <td class="indexkey">Results</td>
    </tr>
    <tr valign=top>
      <td>Update \e master to base work on the most recently integrated features.</td>
      <td>
      \verbatim
      git checkout master
      \endverbatim
      </td>
      <td>
      \verbatim
      ...o   *master
      \endverbatim
      </td>
    </tr>
    <tr valign=top>
      <td></td>
      <td>
      \verbatim
      git pull
      \endverbatim
      </td>
      <td>
      \verbatim
      ...o----o   *master
      \endverbatim
      </td>
    </tr>
    <tr valign=top>
      <td>
        Create the local \e topic branch. Use a meaningful name for "topic".<br>
	This is where the real work happens. Edit, stage, and commit files
	repeatedly as needed for your work. 
      </td>
      <td>
      \verbatim
      git checkout -b topic
      \endverbatim
      </td>
      <td>
      \verbatim
      ...o----o   master
              ^  *topic
      \endverbatim
      </td>
    </tr>
    <tr valign=top>
      <td>During this step, avoid the "urge to merge" from an integration
      branch. Keep your commits focused on the topic at hand. </td>
      <td>
      \verbatim
      edit <files>
      git add -- <files>
      git commit 
      \endverbatim
      </td>
      <td>
      \verbatim
      ...o----o       master
               \
                o    *topic
      \endverbatim
      </td>
    </tr>
    <tr valign=top>
      <td></td>
      <td>
      \verbatim
      edit <files>
      git add -- <files>
      git commit 
      \endverbatim
      </td>
      <td>
      \verbatim
      ...o----o            master
               \
                o----o    *topic
      \endverbatim
      </td>
    </tr>
    <tr valign=top>
      <td>When your feature branch has matured enough (though there is no reason
      why not even due this earlier already), you should ensure no citical errors
      are left when performing an experimental build.</td>
      <td>
      \verbatim
      make Experimental
      \endverbatim
      </td>
      <td></td>
    </tr>
    <tr valign=top>
      <td>Push your changes back to the \e master branch, thereby publishing them
      to be seen by others.</td>
      <td>
      \verbatim
      git checkout master
      git merge topic
      \endverbatim
      </td>
      <td>
      \verbatim
      ...o----o...       ...o   *master
               \           /
                o----o----o      topic
      \endverbatim
      </td>
    </tr>
    <tr valign=top>
      <td></td>
      <td></td>
      <td></td>
    </tr>
  </table>

  \section dal_devel_cmake Working with CMake

  <ul>
    <li>Add a library to the project using the specified source files:
    \verbatim
    add_library(<name> [STATIC | SHARED | MODULE]
              [EXCLUDE_FROM_ALL]
              source1 source2 ... sourceN)
    \endverbatim
    \c STATIC, \c SHARED, or \c MODULE may be given to specify the type of
    library to be created. \c STATIC libraries are archives of object files for
    use when linking other targets. \c SHARED libraries are linked dynamically
    and loaded at runtime. \c MODULE libraries are plugins that are not linked
    into other targets but may be loaded dynamically at runtime using
    dlopen-like functionality. If no type is given explicitly the type is
    \c STATIC or \c SHARED based on whether the current value of the variable
    \c BUILD_SHARED_LIBS is true.

    <li>Add an executable to the project using the specified source files:
    \verbatim
    add_executable(<name> [WIN32] [MACOSX_BUNDLE]
                 [EXCLUDE_FROM_ALL]
                 source1 source2 ... sourceN)
    \endverbatim
  </ul>

  \section dal_devel_releases Preparing a release

  For an external user of the DAL we consider the following options when
  when retrieving code directory from the repository:
  <ol>
    <li>Get current development version.
    <li>Get latest release version.
    <li>Get earlier release version.
  </ol>

  The first step in order to prepare a release is to create a tagged version 
  on the special \e release branch:
  \code
  ## Check out the release branch and merge
  git checkout release
  git merge master
  ## Tag the version
  git tag -a v0.1.0 -m "DAL release, version 0.1.0"
  ## Push the tags back to the origin repository
  git push --tags
  git push origin release
  \endcode

  <ol>
    <li>Check out \e master branch
    \code
    git checkout master
    \endcode
    such that
    \verbatim
    ...o     *master

    ...o     release
    \endverbatim
    <li>From branch \e master checkout a new branch \e nextRelease
    \code
    git checkout -b nextRelease
    \endcode
    to accumulate the changes to be release
    \verbatim
    ...o       master
        \
         o     *nextRelease

    ...o       release
    \endverbatim
    <li>Run the necessary tests to accept the current version as a release
    candidate -- <b>this bit still needs to be defined, to come of with a
    list of criteria</b>.
    <li>Adjust the version information in the top-level \c CMakeLists.txt file:
    \code
    ## Project release version
    set (DAL_VERSION_MAJOR 0)
    set (DAL_VERSION_MINOR 1)
    set (DAL_VERSION_PATCH 1)
    \endcode
    These changes now need to be committed:
    \verbatim
    git add CMakeLists.txt
    git commit -m "DAL release, version 0.1.1"
    \endverbatim
    <li>Check out the \e release branch and pull in the previously staged
    changes:
    \verbatim
    git checkout release
    git merge nextRelease
    \endverbatim
    which results in
    \verbatim
    ...o----o----o----o            master
        \
         o----o                    nextRelease
               \
             ...o--------------o   release
    \endverbatim
  </ol>



  \section dal_devel_conventions Coding conventions

  No formal coding guidelines have been set up for the development of the DAL,
  though a few reasonable conventions should be adhered to in order to keep the 
  code readable and consistent:

  <ol>
    <li>All classes reside within the namespace "DAL".

    <li>All source files contain a Doxygen-based documentation of their methods.
    All classes/files are contained within the group "DAL".

    <li>Private variables are indicated by the prefix "its", in order to distringuish
    them from temporary/local variables, e.g.
    \code
    \param itsLength - private data member
    \param length    - local variable or function parameter
    \endcode
    <li>Pointers should be marked by a trailing "_p"; e.g. a dynamically allocated
    array of "data" would become  "itsData_p".
  </ol>

\section dal_devel_classes Creating a new class

<ul>

  <li>For each new class included into the library (\e libdal) at least two
  files are created:
  <ol>
    <li>Header file (e.g. \e dalDataset.h) containing function prototypes and
	declarations.
	<li>Implementation file (e.g. \e dalDataset.cpp) containing the actual
	implementation of functions	and methods.
  </ol>

  <li>All classes included into the library are enclosed in the \e DAL
  namespace: in the header file -
  \code
  namespace DAL {
  
    class dalDataset {
	};
  
  }
  \endcode
  and in the implementation file
  \code
  namespace DAL {
  
    dalDataset::dalDataset () {};
  
  }
  \endcode

  <li>Include guards in the header file -
  \code
  #ifndef DALDATASET_H
  #define DALDATASET_H
  
  namespace DAL {
  
  }
  
  #endif
  \endcode
  and in the implementation file -
  \code
  #ifndef DALDATASET_H
  #include "dalDataset.h"
  #endif
  
  namespace DAL {
  
  }
  \endcode
  
  <li>Make private variables of the class distinguishable from either temporary local ones and
  function parameters:
  \code
  bool openFile (const string &filename)
  {
    bool status (true);
  
    if ( h5fh_p = H5Fopen(filename, H5F_ACC_RDWR, H5P_DEFAULT ) > 0 ) {
	  filename_p = filename;
	} else {
	  status = false;
	}

    return status;  
  }
  \endcode
  So in this example both \e filename_p and \e h5fh_p would be private variables, \e filename
  a function parameter and \e status variable local to the function.
  
  <li>Parameters/variables of functions and methods should be given as one per
  line:
  \code
  dalDataset::dalDataset( const char * dsname,
                          std::string filetype,
                          const bool &overwrite)
  \endcode

  <li>Both header and implementation file should contain a GNU GPL License
  header:
  \code
  /*-------------------------------------------------------------------------*
   | $Id:: dalDataset.h 1378 2008-04-01 16:47:06Z baehren                  $ |
   *-------------------------------------------------------------------------*
   ***************************************************************************
   *   Copyright (C) 2008                                                    *
   *   <Name author> (<Email author>)                                        *
   *                                                                         *
   *   This program is free software; you can redistribute it and/or modify  *
   *   it under the terms of the GNU General Public License as published by  *
   *   the Free Software Foundation; either version 2 of the License, or     *
   *   (at your option) any later version.                                   *
   *                                                                         *
   *   This program is distributed in the hope that it will be useful,       *
   *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
   *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
   *   GNU General Public License for more details.                          *
   *                                                                         *
   *   You should have received a copy of the GNU General Public License     *
   *   along with this program; if not, write to the                         *
   *   Free Software Foundation, Inc.,                                       *
   *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
   ***************************************************************************/
  \endcode

  </ul>

*/