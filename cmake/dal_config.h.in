
#ifndef DAL_CONFIG_H
#define DAL_CONFIG_H

// ==============================================================================
//
//  Package information
//
// ==============================================================================

#define DAL_VERSION "${DAL_VERSION}"
#define DAL_VERSION_MAJOR ${DAL_VERSION_MAJOR}
#define DAL_VERSION_MINOR ${DAL_VERSION_MINOR}
#define DAL_VERSION_PATCH ${DAL_VERSION_PATCH}

/* Print debugging information? */
#cmakedefine DEBUGGING_MESSAGES

// ==============================================================================
//
//  System information
//
// ==============================================================================

#cmakedefine CMAKE_SYSTEM "${CMAKE_SYSTEM}"
#cmakedefine CMAKE_SYSTEM_VERSION "${CMAKE_SYSTEM_VERSION}"
#cmakedefine CMAKE_SYSTEM_PROCESSOR "${CMAKE_SYSTEM_PROCESSOR}"

// ==============================================================================
//
//  Compiler flags
//
// ==============================================================================

/* Define if we have the BOOST library */
#cmakedefine DAL_WITH_BOOST

/* Define if we have the CFITSIO library */
#cmakedefine DAL_WITH_CFITSIO

/* Define if we have the CASACORE/CASA library */
#cmakedefine DAL_WITH_CASACORE

/* Define if we have the GSL library */
#cmakedefine DAL_WITH_GSL

/* Define if we have a working installation of the HDF5 library */
#cmakedefine DAL_WITH_HDF5

/* Define if we have the LOFAR library */
#cmakedefine DAL_WITH_LOFAR

/*
  Define if we have the MySQL library
  MYSQL_VERSION  = ${MYSQL_VERSION}
  MYSQL_INCLUDES = ${MYSQL_INCLUDES}
*/
#cmakedefine DAL_WITH_MYSQL

/* Define if we have the NumUtil library */
#cmakedefine DAL_WITH_NUMUTIL

/* Define if we have the OPENMP library */
#cmakedefine DAL_WITH_OPENMP

/* Define if we have the WCSLIB library */
#cmakedefine DAL_WITH_WCSLIB

// ==============================================================================
//
//  External header files and package definitions
//
// ==============================================================================

//__________________________________________________________
// HDF5 header files

#ifdef DAL_WITH_HDF5
/* Use 1.8 API as default */
#ifdef H5_USE_16_API_DEFAULT
#define H5_USE_16_API_DEFAULT 0
#endif
/* Activation of casacore code */
#define CASA_HDF5_H
/* Header files to be included */
#include <hdf5.h>
#include <hdf5_hl.h>
#endif

//__________________________________________________________
// casacore header files

#ifdef DAL_WITH_CASACORE
#define DAL_WITH_CASA
/* #define AIPS_STDLIB 1 */
/* #define AIPS_AUTO_STL 1 */
/* #define AIPS_NO_LEA_MALLOC 1 */
#include <casa/Arrays.h>
#include <casa/Arrays/Matrix.h>
#include <casa/Arrays/Vector.h>
#include <casa/BasicSL/String.h>
#include <casa/BasicMath/Math.h>
#include <casa/Quanta/Quantum.h>
#include <tables/Tables.h>
#include <tables/Tables/Table.h>
#endif

//__________________________________________________________
// CFITSIO header files

#ifdef DAL_WITH_CFITSIO
extern "C"
{
#include <fitsio.h>
}
#endif

//__________________________________________________________
// MySQL header files

#ifdef DAL_WITH_MYSQL
#cmakedefine MYSQL_VERSION "${MYSQL_VERSION}"
#cmakedefine MYSQL_PORT "${MYSQL_PORT}"
#include <mysql.h>
#endif

//__________________________________________________________
// Header files for Python bindings

#ifdef PYTHON
// Boost.Python headers
#include <boost/python.hpp>
#include <boost/python.hpp>
#include <boost/python/object.hpp>
#include <boost/python/list.hpp>
#include <boost/python/extract.hpp>
// NumUtil headers
#ifdef DAL_WITH_NUMUTIL
#include <num_util.h>
#endif
#endif

// ==============================================================================
//
//  Definition of constants and types
//
// ==============================================================================

namespace DAL {

  const double PI    = 3.1415926535897932384626433832795;
  const bool SUCCESS = true;
  const bool FAIL    = false;
  
  typedef unsigned char              UInt8;
  typedef unsigned short            UInt16;
  typedef short                      Int16;
  typedef unsigned int              UInt32;
  typedef int                        Int32;
  typedef float                    Float32;
  typedef long long                  Int64;
  typedef unsigned long long        UInt64;
  typedef double                   Float64;

  //! Complex number composed of two 8-bit unsigned integers
  struct Complex_UInt8 {
    UInt8 real;
    UInt8 imag;
  };

  //! Complex number composed of two 16-bit unsigned integers
  struct Complex_UInt16 {
    UInt16 real;
    UInt16 imag;
  };

  //! Complex number composed of two 32-bit unsigned integers
  struct Complex_UInt32 {
    UInt32 real;
    UInt32 imag;
  };

  //! Complex number composed of two 16-bit integers
  struct Complex_Int16 {
    Int16 real;
    Int16 imag;
  };

  //! Complex number composed of two 32-bit integers
  struct Complex_Int32 {
    Int32 real;
    Int32 imag;
  };

  //! Complex number composed of two 64-bit integers
  struct Complex_Int64 {
    Int64 real;
    Int64 imag;
  };

  //! Complex number composed of two 32-bit floats 
  struct Complex_Float32 {
    Float32 real;
    Float32 imag;
  };

  //! Complex number composed of two 64-bit floats 
  struct Complex_Float64 {
    Float64 real;
    Float64 imag;
  };

  struct Complex_Char {
    char real;  // real part
    char imag;  // imaginary part
  };

  typedef Complex_Float32    Complex_Float;
  typedef Complex_Float64   Complex_Double;
   
}   //   END -- namespace DAL

#endif

