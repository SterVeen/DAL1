
#ifndef DAL_CONFIG_H
#define DAL_CONFIG_H

// ==============================================================================
//
//  Package information
//
// ==============================================================================

#define DAL_VERSION "${DAL_VERSION}"
#define DAL_VERSION_MAJOR ${DAL_VERSION_MAJOR}
#define DAL_VERSION_MINOR ${DAL_VERSION_MINOR}
#define DAL_VERSION_PATCH ${DAL_VERSION_PATCH}

/* Print debugging information? */
#cmakedefine DAL_DEBUGGING_MESSAGES

// ==============================================================================
//
//  System information
//
// ==============================================================================

/* The full version of cmake in major.minor.patch[.tweak[-id]] format. */
#cmakedefine CMAKE_VERSION "${CMAKE_VERSION}"

/* Name of system cmake is compiling for. */
#cmakedefine CMAKE_SYSTEM "${CMAKE_SYSTEM}"

/* OS version CMake is building for. */
#cmakedefine CMAKE_SYSTEM_VERSION "${CMAKE_SYSTEM_VERSION}"

/* The name of the CPU CMake is building for. */
#cmakedefine CMAKE_SYSTEM_PROCESSOR "${CMAKE_SYSTEM_PROCESSOR}"

#cmakedefine CMAKE_HOST_APPLE
#cmakedefine CMAKE_HOST_UNIX
#cmakedefine CMAKE_HOST_WIN32

#cmakedefine CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P}

// ==============================================================================
//
//  Compiler flags
//
// ==============================================================================

/* Define if we have the BOOST library */
#cmakedefine DAL_WITH_BOOST

/* Define if we have the CFITSIO library */
#cmakedefine DAL_WITH_CFITSIO

/* Define if we have the CASACORE/CASA library */
#cmakedefine DAL_WITH_CASACORE

/* Define if we have the GSL library */
#cmakedefine DAL_WITH_GSL

/* Define if we have a working installation of the HDF5 library */
#cmakedefine DAL_WITH_HDF5

/* Define if we have the LOFAR library */
#cmakedefine DAL_WITH_LOFAR

/*
  Define if we have the MySQL library (for configuration inspection):
  MYSQL_VERSION  = ${MYSQL_VERSION}
  MYSQL_INCLUDES = ${MYSQL_INCLUDES}
*/
#cmakedefine DAL_WITH_MYSQL

/* Define if we have the OPENMP library */
#cmakedefine DAL_WITH_OPENMP

/* Define if we have the WCSLIB library */
#cmakedefine DAL_WITH_WCSLIB

// ==============================================================================
//
//  External header files and package definitions
//
// ==============================================================================

#include <string>
#include <string.h>

//__________________________________________________________
// HDF5 header files

#ifdef DAL_WITH_HDF5

// HDF5 compatibility macros: Attribute interface

#ifdef H5Acreate_vers
#undef H5Acreate_vers
#endif
#define H5Acreate_vers 2

#ifdef H5Adelete_vers
#undef H5Adelete_vers
#endif
#define H5Adelete_vers 2

#ifdef H5Aiterate_vers
#undef H5Aiterate_vers
#endif
#define H5Aiterate_vers 2
#ifdef H5Arename_vers
#undef H5Arename_vers
#endif
#define H5Arename_vers 2

// HDF5 compatibility macros: Dataset interface

#ifdef H5Dcreate_vers
#undef H5Dcreate_vers
#endif
#define H5Dcreate_vers 2

#ifdef H5Dopen_vers
#undef H5Dopen_vers
#endif
#define H5Dopen_vers 2

// HDF5 compatibility macros: Error interface

#ifdef H5Eset_auto_vers
#undef H5Eset_auto_vers
#endif
#define H5Eset_auto_vers 2

#ifdef H5Eclear_vers
#undef H5Eclear_vers
#endif
#define H5Eclear_vers 2

#ifdef H5Eprint_vers
#undef H5Eprint_vers
#endif
#define H5Eprint_vers 2

#ifdef H5Eget_auto_vers
#undef H5Eget_auto_vers
#endif
#define H5Eget_auto_vers 2

#ifdef H5Ewalk_vers
#undef H5Ewalk_vers
#endif
#define H5Ewalk_vers 2

// HDF5 compatibility macros: Group interface

#ifdef H5Gcreate_vers
#undef H5Gcreate_vers
#endif
#define H5Gcreate_vers 2

#ifdef H5Gopen_vers
#undef H5Gopen_vers
#endif
#define H5Gopen_vers 2

// HDF5 compatibility macros: Properties interface

#ifdef H5Pinsert_vers
#undef H5Pinsert_vers
#endif
#define H5Pinsert_vers 2

#ifdef H5Pregister_vers
#undef H5Pregister_vers
#endif
#define H5Pregister_vers 2

#ifdef H5Pget_filter_vers
#undef H5Pget_filter_vers
#endif
#define H5Pget_filter_vers 2

// HDF5 compatibility macros: Register interface

#ifdef H5Rget_obj_type_vers
#undef H5Rget_obj_type_vers
#endif
#define H5Rget_obj_type_vers 2

// HDF5 compatibility macros: Datatype interface

#ifdef H5Tarray_create_vers
#undef H5Tarray_create_vers
#endif
#define H5Tarray_create_vers 2

#ifdef H5Tget_array_dims_vers
#undef H5Tget_array_dims_vers
#endif
#define H5Tget_array_dims_vers 2

#ifdef H5Tcommit_vers
#undef H5Tcommit_vers
#endif
#define H5Tcommit_vers 2

#ifdef H5Topen_vers
#undef H5Topen_vers
#endif
#define H5Topen_vers 2

/* Activation of casacore code */
#define CASA_HDF5_H

/* Header files to be included */
#include <hdf5.h>
#include <hdf5_hl.h>

#endif

//__________________________________________________________
// CFITSIO header files

#ifdef DAL_WITH_CFITSIO
#include <fitsio.h>
#endif

//__________________________________________________________
// casacore header files

#ifdef DAL_WITH_CASACORE
#define DAL_WITH_CASA
/* #define AIPS_STDLIB 1 */
/* #define AIPS_AUTO_STL 1 */
/* #define AIPS_NO_LEA_MALLOC 1 */
#else
#endif

//__________________________________________________________
// MySQL header files

#ifdef DAL_WITH_MYSQL
#cmakedefine MYSQL_VERSION "${MYSQL_VERSION}"
#include <mysql.h>
#endif

//__________________________________________________________
// Header files for Python bindings

#ifdef PYTHON
// Boost.Python headers
#include <boost/python.hpp>
#include <boost/python.hpp>
#include <boost/python/object.hpp>
#include <boost/python/list.hpp>
#include <boost/python/extract.hpp>
#endif

//__________________________________________________________
// Extra definitions for LOFAR 

#ifdef DAL_WITH_LOFAR
#ifdef DAL_WITH_BOOST
#define HAVE_BOOST 1
#endif
#endif

// ==============================================================================
//
//  Definition of constants and types
//
// ==============================================================================

namespace DAL {

  const double PI    = 3.1415926535897932384626433832795;
  const bool SUCCESS = true;
  const bool FAIL    = false;
  
  const std::string H5TYPE            = "HDF5";
  const std::string FITSTYPE          = "FITS";
  const std::string MSCASATYPE        = "MSCASA";
  
  const std::string dal_CHAR          = "dalCHAR";
  const std::string dal_STRING        = "dalSTRING";
  const std::string dal_BOOL          = "dalBOOL";
  
  const std::string dal_SHORT         = "dalSHORT";
  const std::string dal_INT           = "dalINT";
  const std::string dal_UINT          = "dalINT";
  const std::string dal_LONG          = "dalLONG";
  
  const std::string dal_FLOAT         = "dalFLOAT";
  const std::string dal_DOUBLE        = "dalDOUBLE";
  
  const std::string dal_COMPLEX       = "dalCOMPLEX";
  const std::string dal_DCOMPLEX      = "dalDCOMPLEX";
  const std::string dal_COMPLEX_CHAR  = "dalCOMPLEX_CHAR";
  const std::string dal_COMPLEX_SHORT = "dalCOMPLEX_SHORT";


  typedef unsigned char              UInt8;
  typedef unsigned short            UInt16;
  typedef short                      Int16;
  typedef unsigned int              UInt32;
  typedef int                        Int32;
  typedef float                    Float32;
  typedef long long                  Int64;
  typedef unsigned long long        UInt64;
  typedef double                   Float64;

  //! Complex number composed of two 8-bit unsigned integers
  struct Complex_UInt8 {
    UInt8 real;
    UInt8 imag;
  };

  //! Complex number composed of two 16-bit unsigned integers
  struct Complex_UInt16 {
    UInt16 real;
    UInt16 imag;
  };

  //! Complex number composed of two 32-bit unsigned integers
  struct Complex_UInt32 {
    UInt32 real;
    UInt32 imag;
  };

  //! Complex number composed of two 16-bit integers
  struct Complex_Int16 {
    Int16 real;
    Int16 imag;
  };

  //! Complex number composed of two 32-bit integers
  struct Complex_Int32 {
    Int32 real;
    Int32 imag;
  };

  //! Complex number composed of two 64-bit integers
  struct Complex_Int64 {
    Int64 real;
    Int64 imag;
  };

  //! Complex number composed of two 32-bit floats 
  struct Complex_Float32 {
    Float32 real;
    Float32 imag;
  };

  //! Complex number composed of two 64-bit floats 
  struct Complex_Float64 {
    Float64 real;
    Float64 imag;
  };

  struct Complex_Char {
    char real;  // real part
    char imag;  // imaginary part
  };

  typedef Complex_Float32    Complex_Float;
  typedef Complex_Float64   Complex_Double;
   
}   //   END -- namespace DAL

#endif

